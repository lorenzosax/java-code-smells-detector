/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
  multi = true;
  visitor = true;
}

PARSER_BEGIN(JavaCodeSmellsDetector)

package jcc;

import java.io.*;
import java.util.*;
import main.*;

public class JavaCodeSmellsDetector
{
  static SymbolTable st= new SymbolTable();
  
  public static void main(String args []) throws ParseException, IOException {
    try {
      FileInputStream file = new FileInputStream("Example.java");
      JavaCodeSmellsDetector detector = new JavaCodeSmellsDetector(file);
     
      ASTcompilationUnit astCompilationUnit = (ASTcompilationUnit) detector.compilationUnit();
      astCompilationUnit.dump("");

      Report report = new Report("MetricsReport.csv", "CodeSmellsReport.csv");
      JavaCodeSmellsDetectorVisitor v = new JavaCodeSmellsDetectorVisitorImplementation();
      astCompilationUnit.jjtAccept(v, report);
	} catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }	
  }
}

PARSER_END(JavaCodeSmellsDetector)

TOKEN_MGR_DECLS :
{}

SKIP :
{
  <SPACE: [" ", "\t", "\f"]>
| <WINDOWS_EOL : "\r\n">
| <UNIX_EOL: "\n">
| <OLD_MAC_EOL: "\r">
| < "//" > : COMMENT_IN_SINGLE_LINE
| < "/*" > : COMMENT_IN_MULTI_LINE
| < "@" < ID >> : ANNOTATION
}

< COMMENT_IN_SINGLE_LINE >
SKIP :
{
  < "\n" | "\r\n" > : DEFAULT
| < ~[ ] >
}

< COMMENT_IN_MULTI_LINE >
SKIP :
{
  < "*/" > : DEFAULT
| < ~[ ] >
}

< ANNOTATION >
SKIP :
{
  < "\n" | "\r\n" > : DEFAULT
| < ~[ ] >
}

TOKEN : /* RESERVED WORDS*/
{
  < ABSTRACT: "abstract" >
| < ASSERT: "assert" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
| < REQUIRES: "requires" >
| < TO: "to" >
| < WITH: "with" >
| < OPEN: "open" >
| < OPENS: "opens" >
| < USES: "uses" >
| < MODULE: "module" >
| < EXPORTS: "exports" >
| < PROVIDES: "provides" >
| < TRANSITIVE: "transitive" >
}

TOKEN : /* NUMBERS */
{
  < #DIGIT : [ "0"-"9" ] >
| < #DIGITS : (< DIGIT >)+ >
| < #OPT_FRANCTION : ("." < DIGITS >)? >
| < #OPT_EXPONENT :
    (
      "E" ([ "+", "-" ])? < DIGITS >
    )? >
| < NUM : < DIGITS > < OPT_FRANCTION > < OPT_EXPONENT > >
}

TOKEN : /* IDENTIFIERS */
{
  < ID :
    [ "A"-"Z", "a"-"z", "_" ]
    (
      [ "A"-"Z", "a"-"z", "_" ]
    | < DIGIT >
    )* >
}

TOKEN: /* OPERATORS*/
{
 
 < ARITOP_LP :
    (
      "+"
    | "-"
    ) >
| < ARITOP_HP :
    (
      "*"
    | "/"
    | "%"
    ) >
}

TOKEN : /* PUNCTUATION SIMBOLS */
{
  < PARTA : "(" >
| < PARTC : ")" >
| < PARQA : "[" >
| < PARQC : "]" >
| < PARGA : "{" >
| < PARGC : "}" >
| < DOT : "." >
| < SEMIC : ";" >
| < COMMA : "," >
}

TOKEN : /* SIMBOLS */
{
  < QMARK : "?" >
  | < DPOINTS: ":" >
  | < EXP: [ "^" ] >
  | < ASS : "=" >
  | < MULASS : "*=" >
  | < DIVASS : "/=" >
  | < ADDASS : "+=" >
  | < SUBASS : "-=" >
  | < NOT : "!" >
  | < AND : "&&" >
  | < OR : "||" >
  | < MAJOR : ">" >
  | < MINOR : "<" >
  | < RELOP :
    (
      "<="
    | "=="
    | "!="
    | ">="
    ) >
}

TOKEN : /* CHARACTERS */
{
	< LITERAL : "\"" (~["\n","\r"])* "\"" >
	| < CHARVALUE : "\'" (~[ "\n", "\r" ]) "\'" >
}

SimpleNode compilationUnit() :
{}
{
	(packageDeclaration())? (importDeclarations())? (typeDeclarations())? eof()
	{
	  return jjtThis;
	}
}

void eof() :
{}
{
  < EOF >
}

void packageDeclaration() :
{}
{
  < PACKAGE > packageName() < SEMIC >
}

void packageName() #void :
{}
{
  <ID> packageName1()
}

void packageName1() #void:
{}
{
  <DOT> (<ID> | < ARITOP_HP >) packageName1() | {}
}

void importDeclarations() #void:
{}
{
  importDeclaration() importDeclarations1()
}

void importDeclarations1() #void :
{}
{
  importDeclaration() importDeclarations1() | {}
}

void importDeclaration() :
{}
{
  <IMPORT> packageName() < SEMIC >
}


void typeDeclarations() #void :
{}
{
  typeDeclaration() typeDeclarations1() 
}

void typeDeclarations1() #void :
{}
{
  typeDeclaration() typeDeclarations1() | {}
}

void typeDeclaration() #void :
{}
{
  LOOKAHEAD(3) classDeclaration() | interfaceDeclaration() | < SEMIC >
}

void classDeclaration() :
{Token t;}
{
  (classOrInterfaceModifiers())? < CLASS > t= < ID > (extendsList())? (implementsList())? classBody()
  {
    jjtThis.value = t;
  }
}

void classOrInterfaceModifiers() #void:
{}
{
  classOrInterfaceModifier() classOrInterfaceModifiers1()
}

void classOrInterfaceModifiers1() #void:
{}
{
  classOrInterfaceModifier() classOrInterfaceModifiers1() | {}
}

void classOrInterfaceModifier() #void :
{}
{
  < PUBLIC > | < ABSTRACT > | < FINAL >
}

void superConstruct():
{}
{
  < EXTENDS > classOrInterfaceType()
}

void implementsList():
{}
{
  < IMPLEMENTS > classOrInterfaceType()
}

void interfaceDeclaration() :
{Token t;}
{
  (classOrInterfaceModifiers())? < INTERFACE > t= < ID > (extendsList())? interfaceBody()
  {
    jjtThis.value = t;
  }
}

void interfaceBody() :
{}
{
  < PARGA > (interfaceMemberDeclarations())? < PARGC >
}

void interfaceMemberDeclarations() #void :
{}
{
  interfaceMemberDeclaration() interfaceMemberDeclarations1()
}

void interfaceMemberDeclarations1() #void :
{}
{
  interfaceMemberDeclaration() interfaceMemberDeclarations1() | {}
}

void interfaceMemberDeclaration() #void:
{}
{
  interfaceMemberModifiers() type() interfaceMemberDeclaration1()
}

void interfaceMemberDeclaration1() #void:
{Token t;}
{
  LOOKAHEAD(2) (variableDeclarator(false) < SEMIC >) #attributeDeclaration
  | (t = methodDeclarator() (throwsConstruct())? < SEMIC >
  {
    jjtThis.value = t;
  }) #abstractMethodDeclaration
}

void interfaceMemberModifiers() #void :
{}
{
  interfaceMemberModifier() interfaceMemberModifiers1()
}

void interfaceMemberModifiers1() #void :
{}
{
  interfaceMemberModifier() interfaceMemberModifiers1() | {}
}

void interfaceMemberModifier() #void :
{}
{
  < PUBLIC > | < STATIC > | < FINAL > | < ABSTRACT >
}

Token methodDeclarator() #void :
{Token t;}
{
  t= < ID > < PARTA > formalParameterList() < PARTC >
  {
    return t;
  }
}

void methodBody() :
{}
{
  block() | < SEMIC >
}

void extendsList() :
{}
{
  < EXTENDS > classOrInterfaceType() extendsList1()
}

void extendsList1() #void:
{}
{
  < COMMA > classOrInterfaceType() extendsList1() | {}
}

void objectType() #void:
{}
{
   < ID > classOrInterfaceType1()
}

void classOrInterfaceType() #void:
{}
{
   < ID > classOrInterfaceType1()
}

void classOrInterfaceType1() #void:
{}
{
   <MINOR> <ID> classOrInterfaceType2()
   | {}
}

void classOrInterfaceType2() #void:
{}
{
   <COMMA> <ID> <MAJOR>
   | <MAJOR>
}

void classBody() :
{}
{
  < PARGA > (classBodyDeclarations())? < PARGC >
}

void classBodyDeclarations() #void :
{}
{
   classBodyDeclaration() classBodyDeclarations1()  
}

void classBodyDeclarations1() #void :
{}
{
  classBodyDeclaration() classBodyDeclarations1() | {}
}

void classBodyDeclaration() #void:
{}
{
  (classMemberModifiers())? classBodyDeclaration1()
}

void classBodyDeclaration1() #void:
{}
{
  LOOKAHEAD(2) classMemberDeclaration()
  | constructorDeclaration()
}

void classMemberDeclaration() #void :
{}
{
  type() classMemberDeclaration1()
}

void classMemberDeclaration1() #void:
{Token t;}
{
  LOOKAHEAD(2) (variableDeclarators(true) < SEMIC >) #fieldDeclaration
  | (t = methodDeclarator() (throwsConstruct())? methodBody()
  {
    jjtThis.value = t;
  }) #methodDeclaration
}

void classMemberModifiers() #void :
{}
{
  classMemberModifier() classMemberModifiers1()
}

void classMemberModifiers1() #void :
{}
{
  classMemberModifier() classMemberModifiers1() | {}
}

void classMemberModifier() #void :
{}
{
  < PUBLIC > | < PROTECTED > | < PRIVATE > | < STATIC > | < FINAL > | < TRANSIENT > | < VOLATILE >
}

void variableDeclarators(boolean isFieldDeclaration) #void :
{}
{
  variableDeclarator(isFieldDeclaration) variableDeclarators1(isFieldDeclaration)
}

void variableDeclarators1(boolean isFieldDeclaration) #void :
{}
{
  < COMMA > variableDeclarator(isFieldDeclaration) variableDeclarators1(isFieldDeclaration) | {}
}

void variableDeclarator(boolean isFieldDeclaration) #void :
{Token t;}
{
  t=variableDeclaratorId() variableDeclarator1()
  {
    if (isFieldDeclaration)
    	install(t, true);
  }
}

void variableDeclarator1() #void :
{}
{
  < ASS > variableInitializer()
  | {}
}

void variableInitializer() :
{}
{
  arrayInitializer() | expression()
}

void arrayInitializer() :
{}
{
  < PARGA > variableInitializers() (< COMMA >)? < PARGC >
}

void variableInitializers() #void :
{}
{
  variableInitializer() variableInitializers1()
}

void variableInitializers1() #void :
{}
{
  < COMMA > variableInitializer() variableInitializers1() | {}
}

void constructorDeclaration() :
{Token t;}
{
  t = constructorDeclarator() (throwsConstruct())? constructorBody()
  {
    jjtThis.value = t;
  }
}

void constructorModifier() #void:
{}
{
  < PUBLIC > | < PROTECTED > | < PRIVATE >
}

Token constructorDeclarator() #void:
{Token t;}
{
  t =< ID > < PARTA > formalParameterList() < PARTC >
  {
    return t;
  }
}

void formalParameterList() :
{}
{
  formalParameter() formalParameterList1() | {}
}

void formalParameterList1() #void:
{}
{
  < COMMA > formalParameter() formalParameterList1() | {}
}

void formalParameter() :
{}
{
  type() variableDeclaratorId()
}

Token variableDeclaratorId() #void:
{Token t = null;}
{
  (t=< ID > variableDeclaratorId1()
  | objectDeclaratorId()) //used for: ex. HashMap<String, Integer> var..
  {
    return t;
  }
}

void objectDeclaratorId() #void:
{}
{
     < MINOR > <ID> objectDeclaratorId1() 
}

void objectDeclaratorId1() #void:
{}
{
    < MAJOR > variableDeclaratorId1() < ID >
    | <COMMA > <ID> < MAJOR > variableDeclaratorId1() < ID >
}

void variableDeclaratorId1() #void:
{}
{
  < PARQA > < PARQC > variableDeclaratorId() | {}
}

void type() #void:
{}
{
	(< VOID > | primitiveType() | objectType()) type1()
}

void type1() #void:
{}
{
	< PARQA > < PARQC > type1() | {}
}

void primitiveType() #void:
{}
{
  < BYTE > | < SHORT > | < INT > | < LONG > | < CHAR > | < BOOLEAN > | < FLOAT > | < DOUBLE >
}

void throwsConstruct() :
{}
{
  < THROWS > classTypeList()
}

void classTypeList() #void:
{}
{
  classOrInterfaceType() classTypeList1()
}

void classTypeList1() #void:
{}
{
  < COMMA > classOrInterfaceType() classTypeList1() | {}
}

void constructorBody() :
{}
{
  	< PARGA > (constructorBody1())* < PARGC >
}

void constructorBody1() #void :
{}
{
  	LOOKAHEAD(2) blockStatements()
	| LOOKAHEAD(2) (< THIS > < PARTA > (argumentList())? < PARTC > <SEMIC>) #thisMethod
	| (< SUPER > < PARTA > (argumentList())? < PARTC > <SEMIC>) #superMethod
}

void blockStatements() #void:
{}
{
  blockStatement() blockStatements1()
}

void blockStatements1() #void:
{}
{
	blockStatement() blockStatements1() | {}
}

void blockStatement() #void:
{}
{
  	try {
	 	(LOOKAHEAD(3) localVariableDeclarationStatement()
	 	| statement())
	} catch(ParseException e) {
		error_skip(SEMIC);
	}
}

void localVariableDeclarationStatement() :
{}
{
	localVariableDeclaration() <SEMIC>
}

void localVariableDeclaration() #void:
{}
{
	type() variableDeclarators(false)
}

void argumentList() #void:
{}
{
	expression() argumentList1()
}

void argumentList1() #void :
{}
{
  <COMMA> expression() argumentList1() | {}
}

void expression() :
{}
{
	assignmentExpression()
}

void assignmentExpression() #void :
{}
{
	LOOKAHEAD(3) conditionalExpression()
	| assignment()
}

void assignment() #void :
{}
{
  leftHandSide() assignmentOperator() assignmentExpression()
}

void leftHandSide() #void :
{}
{
	fieldAccess()
	| identifierName() leftHandSide1()
}

void leftHandSide1() #void :
{}
{
	<PARQA> expression() <PARQC>
	| {}
}

void fieldAccess() :
{}
{
	< THIS > < DOT > < ID >
	| < SUPER > < DOT > < ID >
}

void assignmentOperator() #void:
{}
{
  < MULASS > | < DIVASS > | < ADDASS > | < SUBASS > | <ASS>
}

void conditionalExpression() #void :
{}
{
	conditionalOrExpression() 
}

void conditionalOrExpression() #void:
{}
{
	conditionalAndExpression() conditionalOrExpression1()
}

void conditionalOrExpression1() #void:
{}
{
  <OR> conditionalAndExpression() conditionalOrExpression1() | {}
}

void conditionalAndExpression() #void :
{}
{
	inclusiveOrExpression() conditionalAndExpression1()
}

void conditionalAndExpression1() #void:
{}
{
	<AND> inclusiveOrExpression() conditionalAndExpression1() | {}
}

void inclusiveOrExpression() #void:
{}
{
	exclusiveOrExpression() inclusiveOrExpression1()
}

void inclusiveOrExpression1() #void:
{}
{
	<OR> exclusiveOrExpression() inclusiveOrExpression1() | {}
}


void exclusiveOrExpression() #void:
{}
{
	andExpression() exclusiveOrExpression1()
}

void exclusiveOrExpression1() #void:
{}
{
	<EXP> andExpression() exclusiveOrExpression1() | {}
}

void andExpression() #void:
{}
{
	equalityExpression() andExpression1()
}

void andExpression1() #void:
{}
{
  <AND> equalityExpression() andExpression1() | {}
}

void equalityExpression() #void:
{}
{
	relationalExpression() equalityExpression1()
}

void equalityExpression1() #void:
{}
{
  (<MAJOR> | <MINOR> | <RELOP>) relationalExpression() equalityExpression1() | {}
}

void relationalExpression() #void:
{}
{
	additiveExpression() relationalExpression1()
}

void relationalExpression1() #void:
{}
{
	<MAJOR> additiveExpression() relationalExpression1()
	| <MINOR> additiveExpression() relationalExpression1()
	| <RELOP> additiveExpression() relationalExpression1()
	| <INSTANCEOF> referenceType() relationalExpression1()
	| {}
}

void referenceType() #void:
{}
{
   type() referenceType1()
}

void referenceType1() #void :
{}
{
  < PARQA > < PARQC > referenceType1()
  | {} 
}

void additiveExpression() #void:
{}
{
  multiplicativeExpression() additiveExpression1()
}

void additiveExpression1() #void:
{}
{
  <ARITOP_LP> multiplicativeExpression() additiveExpression1() | {}
}

void multiplicativeExpression() #void:
{}
{
  unaryExpression() multiplicativeExpression1()
}

void multiplicativeExpression1() #void:
{}
{

 <ARITOP_HP> unaryExpression() multiplicativeExpression1() | {}
}

void unaryExpression() :
{}
{
	identifierName() unaryExpression1()
	| classInstanceCreationExpression()
	| literal()
	| < ARITOP_LP > unaryExpression()
	| < NOT > unaryExpression()
	| LOOKAHEAD(2) <THIS> <DOT> unaryExpression()
	| <THIS>
	| < PARTA > unaryExpression1bis()
}

void unaryExpression1() :
{}
{
  (<PARTA> (argumentList())? <PARTC> (< DOT > unaryExpression())?) #methodInvocation
  | LOOKAHEAD(2) <ARITOP_LP> <ARITOP_LP> // POST INCREMENT
  | (<PARQA> expression() <PARQC>) #methodInvocation
  | {}
}

void unaryExpression1bis() #void:
{}
{
  LOOKAHEAD(2) type() <PARTC> unaryExpression() //CAST
  | expression() <PARTC>  
}

void preIncrDecrExpression() :
{}
{
	<ARITOP_LP> <ARITOP_LP> unaryExpression()
}

ValueNode identifierName() :
{boolean isDotId; Token t;}
{
	t = < ID > isDotId = identifierName1(false)
	{
		ValueNode vn = new ValueNode();
		SymbolTableEntry stE = st.get(t.image);
		vn.id = t;
		vn.isAttribute = isDotId;
		if (stE != null) {
			vn.isClassMember = stE.isClassMember();
		}
		jjtThis.value = vn;
		return vn;
	}
}

boolean identifierName1(boolean isDotId) :
{}
{
	< DOT > (< ID > | <CLASS>) identifierName1(true) { return true; }
	| {return isDotId;}
	
}

void classInstanceCreationExpression() :
{}
{
	<NEW> (classOrInterfaceType() | primitiveType()) classInstanceCreationExpression1()	
}

void classInstanceCreationExpression1() #void:
{}
{
	classInstanceCreationExpression2()
	| primitiveType() dimExprs() (dims())?
	
}

void classInstanceCreationExpression2() #void:
{}
{
	<PARTA> (argumentList())? <PARTC> 
	| <MINOR> (argumentList())? <MAJOR> <PARTA> (argumentList())? <PARTC>
	| dimExprs() (dims())?
}

void dimExprs() #void:
{}
{
	dimExpr() dimExprs1()
}


void dimExprs1() #void:
{}
{
	dimExpr() dimExprs1() | {}
}

void dimExpr() #void:
{}
{
	<PARQA> expression() <PARQC>
}

void dims() #void:
{}
{
	dims1() <PARQA> <PARQC>
}


void dims1() #void:
{}
{

   <PARQA> <PARQC> dims1() | {}

}

void literal() #void:
{}
{
	(< TRUE > | < FALSE >)
	| <CHARVALUE>
	| <LITERAL>
	| < NUM >
	| < NULL >
}

void statement() #void:
{}
{
	 LOOKAHEAD(2) statementWithoutTrailingSubstatement()
	| labeledStatement()
	| ifThenStatement()
	| whileStatement()
	| forStatement()
}

void statementNoShortIf():
{}
{
	 LOOKAHEAD(2) statementWithoutTrailingSubstatement()
	| labeledStatementNoShortIf()
	| ifThenElseStatementNoShortIf()
	| whileStatementNoShortIf()
	| forStatementNoShortIf()
}

void block() #void:
{}
{
  < PARGA > (blockStatements())? < PARGC >
}

void statementWithoutTrailingSubstatement() #void:
{}
{
  try {
	(block()
	| emptyStatement()
	| expressionStatement()
	| switchStatement()
	| doStatement()
	| breakStatement()
	| continueStatement()
	| returnStatement()
	| synchronizedStatement()
	| throwsStatement()
	| tryStatement())
	} catch(ParseException e) {
		error_skip(SEMIC);
	}
}

void emptyStatement():
{}
{
	< SEMIC >
}

void labeledStatement():
{}
{
	< ID > <DPOINTS > statement()
}

void labeledStatementNoShortIf():
{}
{
	< ID > <DPOINTS > statementNoShortIf()
}

void expressionStatement() #void :
{}
{
	statementExpression() < SEMIC >
}


void statementExpression() #void:
{}
{
	identifierName()
		((assignmentOperator() assignmentExpression()) #assignmentStatement
		| (<PARTA> (argumentList())? <PARTC> methodInvocation1()) #methodInvocation
		| (<ARITOP_LP> <ARITOP_LP>) #postIncrDecrExpression
		| (<PARQA> expression() <PARQC> assignmentOperator() assignmentExpression())
		)

	| LOOKAHEAD(4) (fieldAccess() assignmentOperator() assignmentExpression()) #assignmentStatement
    | LOOKAHEAD(4) (<THIS> <DOT> identifierName() <PARTA> (argumentList())? <PARTC> methodInvocation1()) #methodInvocation
    | (<SUPER> <DOT> <ID> <PARTA> (argumentList())? <PARTC> methodInvocation1()) #methodInvocation

	| preIncrDecrExpression()
	| classInstanceCreationExpression()
	
}

void methodInvocation() :
{}
{
	 LOOKAHEAD(2) identifierName() <PARTA> (argumentList())? <PARTC> methodInvocation1()
	 | <THIS> <DOT> identifierName() <PARTA> (argumentList())? <PARTC> methodInvocation1()
	 | <SUPER> <DOT> <ID> <PARTA> (argumentList())? <PARTC> methodInvocation1()
}

void methodInvocation1() #void:
{}
{
  <DOT> methodInvocation()
  | {}
}

void ifThenStatement() :
{}
{
  < IF > < PARTA > expression() < PARTC > (statement()) #ifBody elseStatement()
}

void elseStatement() #void:
{}
{
  (< ELSE > statement()) #elseStatement | {}
}

void ifThenElseStatementNoShortIf():
{}
{
	< IF > < PARTA > expression() < PARTC > statementNoShortIf() < ELSE > statementNoShortIf()
}

void switchStatement():
{}
{
	< SWITCH > < PARTA > expression() < PARTC > switchBlock()
}

void switchBlock() #void:
{}
{
	< PARGA > switchBlock1() < PARGC >
}

void switchBlock1() #void:
{}
{
	LOOKAHEAD(2) switchBlockStatementGroups() (switchLabels())?
	| switchLabels()
	| {}
}

void switchBlockStatementGroups() #void:
{}
{
	switchBlockStatementGroup() switchBlockStatementGroups1()
}

void switchBlockStatementGroups1() #void:
{}
{
	switchBlockStatementGroup() switchBlockStatementGroups1() | {}
}

void switchBlockStatementGroup():
{}
{
	switchLabels() blockStatements()
}

void switchLabels() #void:
{}
{
	switchLabel() switchLabels1()
}

void switchLabels1() #void :
{}
{
	switchLabel() switchLabels1() | {}
}

void switchLabel():
{}
{
  	< CASE > constantExpression() < DPOINTS >
	|  < _DEFAULT > < DPOINTS >
}

void whileStatement():
{}
{
  < WHILE > <PARTA > (expression()) #whileCondition < PARTC > (statement()) #whileBody
}

void whileStatementNoShortIf():
{}
{
  < WHILE > <PARTA > expression() < PARTC > statementNoShortIf()
}


void doStatement():
{}
{
  < DO > statement() < WHILE > <PARTA > expression() < PARTC > < SEMIC >
}

void forStatement():
{}
{
  < FOR > < PARTA > forStatement1() < PARTC > statement()
}

void forStatement1() #void :
{}
{
  LOOKAHEAD(3) forInit() < SEMIC > expression() <SEMIC> forUpdate() 
  | type() <ID> <DPOINTS> expression() 
}

void forStatementNoShortIf():
{}
{
  < FOR > <PARTA > forInit() < SEMIC > expression()  < SEMIC > forUpdate() < PARTC > statementNoShortIf()
}

void forInit():
{}
{
  	 LOOKAHEAD(3) statementExpressionList()
	| localVariableDeclaration()
}

void forUpdate():
{}
{
  	statementExpressionList()
}

void statementExpressionList() #void :
{}
{
  	statementExpression() statementExpressionList1()
}

void statementExpressionList1() #void :
{}
{
	< COMMA > statementExpression() statementExpressionList1() | {}
}

void breakStatement():
{}
{
  < BREAK > (< ID >)? < SEMIC >
}

void continueStatement():
{}
{
  < CONTINUE > (< ID >)? < SEMIC >
}
void returnStatement():
{}
{
  < RETURN > (expression())? < SEMIC > 
}

void throwsStatement():
{}
{
  < THROW > expression() < SEMIC >
}

void synchronizedStatement():
{}
{
  < SYNCHRONIZED > < PARTA > expression() < PARTC > block()
}

void tryStatement():
{}
{
	< TRY > ((block()) #tryBody) (catches())? (finallys())?
}

void catches():
{}
{
  	catchClause() catches1()
}

void catches1() #void:
{}
{
	catchClause() catches1() | {}
}

void catchClause() #void:
{}
{
  	< CATCH > <PARTA> formalParameter() < PARTC > ((block()) #catcheBody)
}

void finallys():
{}
{
	< FINALLY > block()
}

void constantExpression() :
{}
{
	expression()
}

JAVACODE 
void error_skip(int kind) throws ParseException 
{
  ParseException e = generateParseException();
  System.err.println(e.toString());
  Token t;
  do
  {
    t = getNextToken();
    if (t.kind == 0) 
    throw new ParseException("achieved EOF! No sync tokens found.");
  }
  while (t.kind != kind);
}

JAVACODE
void install(Token t, boolean isClassMember) #void {
	SymbolTableEntry stE = new SymbolTableEntry(null, t, isClassMember);
	try {
		st.install(stE);
	} catch(Exception e) {
		System.err.println(e.getMessage());
	}
}
