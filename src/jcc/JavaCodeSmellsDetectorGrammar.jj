/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. JavaCodeSmellsDetectorGrammar.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(JavaCodeSmellsDetector)

package jcc;

import java.io.*;
import java.util.*;

public class JavaCodeSmellsDetector/*@bgen(jjtree)*/implements JavaCodeSmellsDetectorTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTJavaCodeSmellsDetectorState jjtree = new JJTJavaCodeSmellsDetectorState();

/*@egen*/
  public static void main(String args []) throws ParseException, IOException
  {
    try
    {
      FileInputStream file = new FileInputStream("Example.java");
      
      JavaCodeSmellsDetector detector = new JavaCodeSmellsDetector(file);
      SimpleNode sn = detector.compilationUnit();
      sn.dump("");
	}
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }	
  }
}

PARSER_END(JavaCodeSmellsDetector)

TOKEN_MGR_DECLS :
{}

SKIP :
{
  <SPACE: [" ", "\t", "\f"]>
| <WINDOWS_EOL : "\r\n">
| <UNIX_EOL: "\n">
| <OLD_MAC_EOL: "\r">
| < "//" > : COMMENT_IN_SINGLE_LINE
| < "/*" > : COMMENT_IN_MULTI_LINE
| < "@" < ID >> : ANNOTATION
}

< COMMENT_IN_SINGLE_LINE >
SKIP :
{
  < "\n" | "\r\n" > : DEFAULT
| < ~[ ] >
}

< COMMENT_IN_MULTI_LINE >
SKIP :
{
  < "*/" > : DEFAULT
| < ~[ ] >
}

< ANNOTATION >
SKIP :
{
  < "\n" | "\r\n" > : DEFAULT
| < ~[ ] >
}

/* RESERVED WORDS*/
TOKEN :
{
  < ABSTRACT: "abstract" >
| < ASSERT: "assert" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
| < REQUIRES: "requires" >
| < TO: "to" >
| < WITH: "with" >
| < OPEN: "open" >
| < OPENS: "opens" >
| < USES: "uses" >
| < MODULE: "module" >
| < EXPORTS: "exports" >
| < PROVIDES: "provides" >
| < TRANSITIVE: "transitive" >
}

/* NUMBERS */
TOKEN : 
{
  < #DIGIT : [ "0"-"9" ] >
| < #DIGITS : (< DIGIT >)+ >
| < #OPT_FRANCTION : ("." < DIGITS >)? >
| < #OPT_EXPONENT :
    (
      "E" ([ "+", "-" ])? < DIGITS >
    )? >
| < NUM :
    (
      "+"
    | "-"
    )?
    < DIGITS > < OPT_FRANCTION > < OPT_EXPONENT > >
}

TOKEN :
{
  < ID :
    [ "A"-"Z", "a"-"z", "_" ]
    (
      [ "A"-"Z", "a"-"z", "_" ]
    | < DIGIT >
    )* >
}

/* OPERATORS*/
TOKEN: 
{
 
 < ARITOP_LP :
    (
      "+"
    | "-"
    ) >
| < ARITOP_HP :
    (
      "*"
    | "/"
    | "%"
    ) >
}

TOKEN : /* PUNCTUATION SIMBOLS */
{
  < PARTA : "(" >
| < PARTC : ")" >
| < PARQA : "[" >
| < PARQC : "]" >
| < PARGA : "{" >
| < PARGC : "}" >
| < DOT : "." >
| < SEMIC : ";" >
| < COMMA : "," >
}

TOKEN :
{
  < QMARK : "?" >
  | < DPOINTS: ":" >
  | < EXP: [ "^" ] >
  | < ASS : "=" >
  | < MULASS : "*=" >
  | < DIVASS : "/=" >
  | < ADDASS : "+=" >
  | < SUBASS : "-=" >
  | < NOT : "!" >
  | < AND : "&&" >
  | < OR : "||" >
  | < MAJOR : ">" >
  | < MINOR : "<" >
  | < RELOP :
    (
      "<="
    | "=="
    | "!="
    | ">="
    ) >
}

TOKEN :
{
	< LITERAL : "\"" (~["\n","\r"])* "\"" >
	| < CHARVALUE : "\'" (~[ "\n", "\r" ]) "\'" >
}

SimpleNode compilationUnit() :
{/*@bgen(jjtree) compilationUnit */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) compilationUnit */
        try {
/*@egen*/
	(packageDeclaration())? (importDeclarations())? (typeDeclarations())? <EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	  return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void packageDeclaration() :
{/*@bgen(jjtree) packageDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTPACKAGEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) packageDeclaration */
  try {
/*@egen*/
  < PACKAGE > packageName() < SEMIC >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void packageName()       :
{}
{
  <ID> packageName1()
}

void packageName1()      :
{}
{
  <DOT> (<ID> | < ARITOP_HP >) packageName1() | {}
}

void importDeclarations()      :
{}
{
  importDeclaration() importDeclarations1()
}

void importDeclarations1()       :
{}
{
  importDeclaration() importDeclarations1() | {}
}

void importDeclaration() :
{/*@bgen(jjtree) importDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPORTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) importDeclaration */
  try {
/*@egen*/
  <IMPORT> packageName() < SEMIC >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void typeDeclarations()       :
{}
{
  typeDeclaration() typeDeclarations1() 
}

void typeDeclarations1()       :
{}
{
  typeDeclaration() typeDeclarations1() | { }
}

void typeDeclaration()       :
{}
{
  LOOKAHEAD(3) classDeclaration() | interfaceDeclaration() | < SEMIC >
}

void classDeclaration() :
{/*@bgen(jjtree) classDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) classDeclaration */
  try {
/*@egen*/
  (classOrInterfaceModifiers())? < CLASS > < ID > (extendsList())? (implementsList())? classBody()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void classOrInterfaceModifiers()      :
{}
{
  classOrInterfaceModifier() classOrInterfaceModifiers1()
}

void classOrInterfaceModifiers1()      :
{}
{
  classOrInterfaceModifier() classOrInterfaceModifiers1() | {}
}

void classOrInterfaceModifier()       :
{}
{
  < PUBLIC > | < ABSTRACT > | < FINAL >
}

void superConstruct():
{/*@bgen(jjtree) superConstruct */
  SimpleNode jjtn000 = new SimpleNode(JJTSUPERCONSTRUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) superConstruct */
  try {
/*@egen*/
  < EXTENDS > classOrInterfaceType()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void implementsList():
{/*@bgen(jjtree) implementsList */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPLEMENTSLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) implementsList */
  try {
/*@egen*/
  < IMPLEMENTS > classOrInterfaceType()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void interfaceDeclaration() :
{/*@bgen(jjtree) interfaceDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTINTERFACEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) interfaceDeclaration */
  try {
/*@egen*/
  (classOrInterfaceModifiers())? < INTERFACE > < ID > (extendsList())? interfaceBody()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void interfaceBody() :
{/*@bgen(jjtree) interfaceBody */
  SimpleNode jjtn000 = new SimpleNode(JJTINTERFACEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) interfaceBody */
  try {
/*@egen*/
  < PARGA > (interfaceMemberDeclarations())? < PARGC >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void interfaceMemberDeclarations()       :
{}
{
  interfaceMemberDeclaration() interfaceMemberDeclarations1()
}

void interfaceMemberDeclarations1()       :
{}
{
  interfaceMemberDeclaration() interfaceMemberDeclarations1() | {}
}

void interfaceMemberDeclaration()      :
{}
{
  interfaceMemberModifiers() type() interfaceMemberDeclaration1()
}

void interfaceMemberDeclaration1()      :
{}
{
  LOOKAHEAD(2)/*@bgen(jjtree) constantDeclaration */
               {
                 SimpleNode jjtn001 = new SimpleNode(JJTCONSTANTDECLARATION);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/ (variableDeclarator() < SEMIC >)/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
               }
/*@egen*/                     
  |/*@bgen(jjtree) abstractMethodDeclaration */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTABSTRACTMETHODDECLARATION);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ (methodDeclarator() (throwsConstruct())? < SEMIC >)/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/                           
}

void interfaceMemberModifiers()       :
{}
{
  interfaceMemberModifier() interfaceMemberModifiers1()
}

void interfaceMemberModifiers1()       :
{}
{
  interfaceMemberModifier() interfaceMemberModifiers1() | {}
}

void interfaceMemberModifier()       :
{}
{
  < PUBLIC > | < STATIC > | < FINAL > | < ABSTRACT >
}

void methodDeclarator()       :
{}
{
  < ID > < PARTA > (formalParameterList())? < PARTC >
}

void extendsList() :
{/*@bgen(jjtree) extendsList */
  SimpleNode jjtn000 = new SimpleNode(JJTEXTENDSLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) extendsList */
  try {
/*@egen*/
  < EXTENDS > classOrInterfaceType() extendsList1()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void extendsList1()      :
{}
{
  < COMMA > classOrInterfaceType() extendsList1() | {}
}

void objectType()      :
{}
{
   < ID > classOrInterfaceType1()
}

void classOrInterfaceType() :
{/*@bgen(jjtree) classOrInterfaceType */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSORINTERFACETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) classOrInterfaceType */
   try {
/*@egen*/
   < ID > classOrInterfaceType1()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void classOrInterfaceType1()      :
{}
{
   <MINOR> <ID> classOrInterfaceType2()
   | { }
}

void classOrInterfaceType2()      :
{}
{
   <COMMA> <ID> <MAJOR>
   | <MAJOR>
}

void classBody() :
{/*@bgen(jjtree) classBody */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) classBody */
  try {
/*@egen*/
  < PARGA > (classBodyDeclarations())? < PARGC >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void classBodyDeclarations()       :
{}
{
   classBodyDeclaration() classBodyDeclarations1()  
}

void classBodyDeclarations1()       :
{}
{
  classBodyDeclaration() classBodyDeclarations1() | {}
}

void classBodyDeclaration()      :
{}
{
 /* LOOKAHEAD(4)*/ constructorDeclaration()
 // | classMemberDeclaration()
}


void classMemberDeclaration() :
{/*@bgen(jjtree) classMemberDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSMEMBERDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) classMemberDeclaration */
                   try {
/*@egen*/
  /*LOOKAHEAD(9)*/ fieldDeclaration()/*@bgen(jjtree)*/
                   } catch (Throwable jjte000) {
                     if (jjtc000) {
                       jjtree.clearNodeScope(jjtn000);
                       jjtc000 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte000 instanceof RuntimeException) {
                       throw (RuntimeException)jjte000;
                     }
                     if (jjte000 instanceof ParseException) {
                       throw (ParseException)jjte000;
                     }
                     throw (Error)jjte000;
                   } finally {
                     if (jjtc000) {
                       jjtree.closeNodeScope(jjtn000, true);
                     }
                   }
/*@egen*/
  //| methodDeclaration()
}

void fieldDeclaration() :
{/*@bgen(jjtree) fieldDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTFIELDDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fieldDeclaration */
  try {
/*@egen*/
  (fieldModifiers())? type() variableDeclarators() < SEMIC >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void fieldModifiers() :
{/*@bgen(jjtree) fieldModifiers */
  SimpleNode jjtn000 = new SimpleNode(JJTFIELDMODIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fieldModifiers */
  try {
/*@egen*/
  fieldModifier() fieldModifiers1()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void fieldModifiers1() :
{/*@bgen(jjtree) fieldModifiers1 */
  SimpleNode jjtn000 = new SimpleNode(JJTFIELDMODIFIERS1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fieldModifiers1 */
  try {
/*@egen*/
  fieldModifier() fieldModifiers1() |/*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                      }
/*@egen*/ {}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void fieldModifier() :
{/*@bgen(jjtree) fieldModifier */
  SimpleNode jjtn000 = new SimpleNode(JJTFIELDMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fieldModifier */
  try {
/*@egen*/
  < PUBLIC > | < PROTECTED > | < PRIVATE > | < STATIC > | < FINAL > | < TRANSIENT > | < VOLATILE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void variableDeclarators()       :
{}
{
  variableDeclarator() variableDeclarators1()
}

void variableDeclarators1()       :
{}
{
  < COMMA > variableDeclarator() variableDeclarators1() | {}
}

void variableDeclarator()       :
{}
{
  variableDeclaratorId() variableDeclarator1()
}

void variableDeclarator1()       :
{}
{
  < ASS > variableInitializer()
  | { }
}

void variableInitializer() :
{/*@bgen(jjtree) variableInitializer */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) variableInitializer */
  try {
/*@egen*/
  arrayInitializer() | expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void arrayInitializer() :
{/*@bgen(jjtree) arrayInitializer */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAYINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) arrayInitializer */
  try {
/*@egen*/
  < PARGA > variableInitializers() (< COMMA >)? < PARGC >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void variableInitializers() :
{/*@bgen(jjtree) variableInitializers */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEINITIALIZERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) variableInitializers */
  try {
/*@egen*/
  variableInitializer() variableInitializers1()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void variableInitializers1() :
{/*@bgen(jjtree) variableInitializers1 */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEINITIALIZERS1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) variableInitializers1 */
  try {
/*@egen*/
  < COMMA > variableInitializer() variableInitializers1() |/*@bgen(jjtree)*/
                                                            {
                                                              jjtree.closeNodeScope(jjtn000, true);
                                                              jjtc000 = false;
                                                            }
/*@egen*/ {}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void constructorDeclaration() :
{/*@bgen(jjtree) constructorDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTCONSTRUCTORDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) constructorDeclaration */
  try {
/*@egen*/
  (constructorModifier())? constructorDeclarator() (throwsConstruct())? constructorBody()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void constructorModifier()      :
{}
{
  < PUBLIC > | < PROTECTED > | < PRIVATE >
}

void constructorDeclarator()      :
{}
{
  < ID > < PARTA > (formalParameterList())? < PARTC >
}

void formalParameterList() :
{/*@bgen(jjtree) formalParameterList */
  SimpleNode jjtn000 = new SimpleNode(JJTFORMALPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) formalParameterList */
  try {
/*@egen*/
  formalParameter() formalParameterList1()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void formalParameterList1()      :
{}
{
  < COMMA > formalParameter() formalParameterList1() | {}
}

void formalParameter() :
{/*@bgen(jjtree) formalParameter */
  SimpleNode jjtn000 = new SimpleNode(JJTFORMALPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) formalParameter */
  try {
/*@egen*/
  type() variableDeclaratorId()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void variableDeclaratorId()      :
{}
{
  < ID > variableDeclaratorId1()
  | objectDeclaratorId()
}

void objectDeclaratorId()      :
{}
{
     < MINOR > <ID> objectDeclaratorId1() 
}


void objectDeclaratorId1()      :
{}
{
    < MAJOR > variableDeclaratorId1() < ID >
    | <COMMA > <ID> < MAJOR > variableDeclaratorId1() < ID >
}


void variableDeclaratorId1()      :
{}
{
  < PARQA > < PARQC > variableDeclaratorId() | {}
}

void type()      :
{}
{
	(< VOID > | primitiveType() | objectType()) type1()
}

void type1()      :
{}
{
	< PARQA > < PARQC > type1() | {}
}

void primitiveType()      :
{}
{
  < BYTE > | < SHORT > | < INT > | < LONG > | < CHAR > | < BOOLEAN > | < FLOAT > | < DOUBLE >
}

void throwsConstruct() :
{/*@bgen(jjtree) throwsConstruct */
  SimpleNode jjtn000 = new SimpleNode(JJTTHROWSCONSTRUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) throwsConstruct */
  try {
/*@egen*/
  < THROWS > classTypeList()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void classTypeList()      :
{}
{
  classOrInterfaceType() classTypeList1()
}

void classTypeList1()      :
{}
{
  < COMMA > classOrInterfaceType() classTypeList1() | {}
}

void constructorBody() :
{/*@bgen(jjtree) constructorBody */
  SimpleNode jjtn000 = new SimpleNode(JJTCONSTRUCTORBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) constructorBody */
        try {
/*@egen*/
  	< PARGA > (constructorBody1())* < PARGC >/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void constructorBody1()       :
{}
{
  	LOOKAHEAD(2) blockStatements()
	| LOOKAHEAD(2)/*@bgen(jjtree) thisMethod */
                       {
                         SimpleNode jjtn001 = new SimpleNode(JJTTHISMETHOD);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*/ (< THIS > < PARTA > (argumentList())? < PARTC > <SEMIC>)/*@bgen(jjtree)*/
                       } catch (Throwable jjte001) {
                         if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           throw (RuntimeException)jjte001;
                         }
                         if (jjte001 instanceof ParseException) {
                           throw (ParseException)jjte001;
                         }
                         throw (Error)jjte001;
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001, true);
                         }
                       }
/*@egen*/            
	|/*@bgen(jjtree) superMethod */
          {
            SimpleNode jjtn002 = new SimpleNode(JJTSUPERMETHOD);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ (< SUPER > < PARTA > (argumentList())? < PARTC > <SEMIC>)/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
          }
/*@egen*/             
}

void blockStatements()      :
{}
{
  blockStatement() blockStatements1()
}

void blockStatements1()      :
{}
{
	blockStatement() blockStatements1() | { }
}

void blockStatement()      :
{}
{
	 LOOKAHEAD(3) localVariableDeclarationStatement()
	 | statement()
}

void localVariableDeclarationStatement() :
{/*@bgen(jjtree) localVariableDeclarationStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTLOCALVARIABLEDECLARATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) localVariableDeclarationStatement */
        try {
/*@egen*/
	localVariableDeclaration() <SEMIC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void localVariableDeclaration()      :
{}
{
	type() variableDeclarators()
}

void argumentList() :
{/*@bgen(jjtree) argumentList */
  SimpleNode jjtn000 = new SimpleNode(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) argumentList */
        try {
/*@egen*/
	expression() argumentList1()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void argumentList1()       :
{}
{
  <COMMA> expression() argumentList1() | {}
}

void expression() :
{/*@bgen(jjtree) expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) expression */
        try {
/*@egen*/
	assignmentExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void assignmentExpression()       :
{}
{
	LOOKAHEAD(3) conditionalExpression() | assignment()
}

void assignment() :
{/*@bgen(jjtree) assignment */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) assignment */
  try {
/*@egen*/
  leftHandSide() assignmentOperator() assignmentExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void leftHandSide() :
{/*@bgen(jjtree) leftHandSide */
  SimpleNode jjtn000 = new SimpleNode(JJTLEFTHANDSIDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) leftHandSide */
        try {
/*@egen*/
	LOOKAHEAD(3) fieldAccess()
	| LOOKAHEAD(3) identifierName()
	| arrayAccess()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void fieldAccess() :
{/*@bgen(jjtree) fieldAccess */
  SimpleNode jjtn000 = new SimpleNode(JJTFIELDACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fieldAccess */
        try {
/*@egen*/
	< THIS > < DOT > < ID >
	| < SUPER > < DOT > < ID >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void assignmentOperator() :
{/*@bgen(jjtree) assignmentOperator */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) assignmentOperator */
        try {
/*@egen*/
	< MULASS > | < DIVASS > | < ADDASS > | < SUBASS > | <ASS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void conditionalExpression()       :
{}
{
	conditionalOrExpression() 
}

void conditionalOrExpression()      :
{}
{
	conditionalAndExpression() conditionalOrExpression1()
}

void conditionalOrExpression1()      :
{}
{
  <OR> conditionalAndExpression() conditionalOrExpression1() | { }
}

void conditionalAndExpression()       :
{}
{
	inclusiveOrExpression() conditionalAndExpression1()
}

void conditionalAndExpression1()      :
{}
{
	<AND> inclusiveOrExpression() conditionalAndExpression1() | { }
}

void inclusiveOrExpression()      :
{}
{
	exclusiveOrExpression() inclusiveOrExpression1()
}

void inclusiveOrExpression1()      :
{}
{
	<OR> exclusiveOrExpression() inclusiveOrExpression1() | { }
}


void exclusiveOrExpression()      :
{}
{
	andExpression() exclusiveOrExpression1()
}

void exclusiveOrExpression1()      :
{}
{
	<EXP> andExpression() exclusiveOrExpression1() | { }
}

void andExpression()      :
{}
{
	equalityExpression() andExpression1()
}

void andExpression1()      :
{}
{
  <AND> equalityExpression() andExpression1() | { }
}

void equalityExpression()      :
{}
{
	relationalExpression() equalityExpression1()
}

void equalityExpression1()      :
{}
{
  (<MAJOR> | <MINOR> | <RELOP>) relationalExpression() equalityExpression1() | { }
}

void relationalExpression()      :
{}
{
	additiveExpression() relationalExpression1()
}

void relationalExpression1()      :
{}
{
	<MAJOR> additiveExpression() relationalExpression1()
	| <MINOR> additiveExpression() relationalExpression1()
	| <RELOP> additiveExpression() relationalExpression1()
	//| <INSTANCEOF> referenceType() relationalExpression1()
	| {}
}

void additiveExpression()      :
{}
{
	multiplicativeExpression() additiveExpression1()
}

void additiveExpression1()      :
{}
{
  <ARITOP_LP> multiplicativeExpression() additiveExpression1() | { }
}

void multiplicativeExpression()      :
{}
{
	unaryExpression()  multiplicativeExpression1()
}

void multiplicativeExpression1()      :
{}
{
  <ARITOP_HP> unaryExpression() multiplicativeExpression1() | { }
}

void castExpression()      :
{}
{
  <PARTA> type() <PARTC> unaryExpression()
}

void unaryExpression()      :
{}
{
 	LOOKAHEAD(3) identifierName() unaryExpression1()
 	| LOOKAHEAD(3) primary()
 	| castExpression()
	| < ARITOP_LP > unaryExpression()
	| < NOT > unaryExpression()
}

void unaryExpression1()      :
{}
{
  <PARTA> (argumentList())? <PARTC> (< DOT > unaryExpression())?
  | <ARITOP_LP> <ARITOP_LP>
  | { }
}

void preIncrDecrExpression() :
{/*@bgen(jjtree) preIncrDecrExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTPREINCRDECREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) preIncrDecrExpression */
        try {
/*@egen*/
	<ARITOP_LP> <ARITOP_LP> unaryExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void postIncrDecrExpression() :
{/*@bgen(jjtree) postIncrDecrExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTPOSTINCRDECREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) postIncrDecrExpression */
        try {
/*@egen*/
	identifierName() <ARITOP_LP> <ARITOP_LP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void identifierName()       :
{}
{
	< ID > identifierName1()
}

void identifierName1()       :
{}
{
	< DOT > (< ID > | <CLASS>) identifierName1()
	| {}
}


void primary()      :
{}
{
	arrayAccess()
	| <THIS>
	| <PARTA> expression() <PARTC>
	| classInstanceCreationExpression() 
	| literal()
	
}

void classInstanceCreationExpression() :
{/*@bgen(jjtree) classInstanceCreationExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSINSTANCECREATIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) classInstanceCreationExpression */
        try {
/*@egen*/
	<NEW> classOrInterfaceType() classInstanceCreationExpression1()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	
}

void classInstanceCreationExpression1()      :
{}
{
	 classOrInterfaceType() classInstanceCreationExpression2()
	| primitiveType() dimExprs() (dims())?
	
}

void classInstanceCreationExpression2()      :
{}
{
	<PARTA> (argumentList())? <PARTC> 
	| <MINOR> (argumentList())? <MAJOR> <PARTA> (argumentList())? <PARTC>
	| dimExprs() (dims())?
}

void dimExprs()      :
{}
{
	dimExpr() dimExprs1()
}


void dimExprs1()      :
{}
{
	dimExpr() dimExprs1() | {}
}

void dimExpr()      :
{}
{
	<PARQA> expression() <PARQC>
}

void dims()      :
{}
{
	dims1() <PARQA> <PARQC>
}


void dims1()      :
{}
{

   <PARQA> <PARQC> dims1() | {}

}

void arrayAccess() :
{/*@bgen(jjtree) arrayAccess */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAYACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) arrayAccess */
        try {
/*@egen*/
	identifierName() <PARQA> expression() <PARQC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}


void literal()      :
{}
{
	(< TRUE > | < FALSE >)
	| <CHARVALUE>
	| <LITERAL>
	| < NUM >
	| < NULL >
}

void statement()      :
{}
{
	 LOOKAHEAD(2) statementWithoutTrailingSubstatement()
	| labeledStatement()
	| ifThenStatement()
	| whileStatement()
	| forStatement()
}

void statementNoShortIf():
{/*@bgen(jjtree) statementNoShortIf */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTNOSHORTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) statementNoShortIf */
         try {
/*@egen*/
	 LOOKAHEAD(2) statementWithoutTrailingSubstatement()
	| labeledStatementNoShortIf()
	| ifThenElseStatementNoShortIf()
	| whileStatementNoShortIf()
	| forStatementNoShortIf()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void block()      :
{}
{
  < PARGA > (blockStatements())? < PARGC >
}

void statementWithoutTrailingSubstatement()      :
{}
{
	block()
	|emptyStatement()
	| expressionStatement()
	| switchStatement()
	| doStatement()
	| breakStatement()
	| continueStatement()
	| returnStatement()
	| synchronizedStatement()
	| throwsStatement()
	| tryStatement()
}

void emptyStatement():
{/*@bgen(jjtree) emptyStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTEMPTYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) emptyStatement */
        try {
/*@egen*/
	< SEMIC >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void labeledStatement():
{/*@bgen(jjtree) labeledStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTLABELEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) labeledStatement */
        try {
/*@egen*/
	< ID > <DPOINTS > statement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void labeledStatementNoShortIf():
{/*@bgen(jjtree) labeledStatementNoShortIf */
  SimpleNode jjtn000 = new SimpleNode(JJTLABELEDSTATEMENTNOSHORTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) labeledStatementNoShortIf */
        try {
/*@egen*/
	< ID > <DPOINTS > statementNoShortIf()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void expressionStatement():
{/*@bgen(jjtree) expressionStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) expressionStatement */
        try {
/*@egen*/
	statementExpression() < SEMIC >/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void statementExpression():
{/*@bgen(jjtree) statementExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) statementExpression */
        try {
/*@egen*/
	LOOKAHEAD(6) assignment()|
	LOOKAHEAD(2) methodInvocation()
	| postIncrDecrExpression()
	| preIncrDecrExpression()
	| classInstanceCreationExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}

/*TODO*/
void methodInvocation() :
{/*@bgen(jjtree) methodInvocation */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODINVOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) methodInvocation */
         try {
/*@egen*/
	 LOOKAHEAD(2) identifierName() <PARTA> (argumentList())? <PARTC> methodInvocation1()
	// | LOOKAHEAD(2) primary() <PARTA> (argumentList())? <PARTC> methodInvocation1()
	 | <THIS> <DOT> identifierName() <PARTA> (argumentList())? <PARTC> methodInvocation1()
	 | <SUPER> <DOT> <ID> <PARTA> (argumentList())? <PARTC> methodInvocation1()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void methodInvocation1():
{/*@bgen(jjtree) methodInvocation1 */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODINVOCATION1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) methodInvocation1 */
  try {
/*@egen*/
  <DOT> methodInvocation()
  |/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ {}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ifThenStatement() :
{/*@bgen(jjtree) ifThenStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTIFTHENSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ifThenStatement */
  try {
/*@egen*/
  < IF > < PARTA > expression() < PARTC >/*@bgen(jjtree) ifBody */
                                          {
                                            SimpleNode jjtn001 = new SimpleNode(JJTIFBODY);
                                            boolean jjtc001 = true;
                                            jjtree.openNodeScope(jjtn001);
                                          }
                                          try {
/*@egen*/ (statement())/*@bgen(jjtree)*/
                                          } catch (Throwable jjte001) {
                                            if (jjtc001) {
                                              jjtree.clearNodeScope(jjtn001);
                                              jjtc001 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte001 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte001;
                                            }
                                            if (jjte001 instanceof ParseException) {
                                              throw (ParseException)jjte001;
                                            }
                                            throw (Error)jjte001;
                                          } finally {
                                            if (jjtc001) {
                                              jjtree.closeNodeScope(jjtn001, true);
                                            }
                                          }
/*@egen*/         elseStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void elseStatement():
{/*@bgen(jjtree) elseStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTELSESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) elseStatement */
        try {
/*@egen*/
	< ELSE > statement() |/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/ {}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ifThenElseStatementNoShortIf():
{/*@bgen(jjtree) ifThenElseStatementNoShortIf */
  SimpleNode jjtn000 = new SimpleNode(JJTIFTHENELSESTATEMENTNOSHORTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ifThenElseStatementNoShortIf */
        try {
/*@egen*/
	< IF > < PARTA > expression() < PARTC > statementNoShortIf() < ELSE > statementNoShortIf()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void switchStatement():
{/*@bgen(jjtree) switchStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) switchStatement */
        try {
/*@egen*/
	< SWITCH > < PARTA > expression() < PARTC > switchBlock()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void switchBlock():
{/*@bgen(jjtree) switchBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) switchBlock */
        try {
/*@egen*/
	/*< PARGA > (switchBlockStatementGroups())? (switchLabels())? < PARGC >*/
	LOOKAHEAD(2) < PARGA > < PARGC >
	| LOOKAHEAD(2) < PARGA > switchBlockStatementGroups() < PARGC >
	| LOOKAHEAD(2) < PARGA > switchLabels() < PARGC >
	| < PARGA > switchBlockStatementGroups() switchLabels() < PARGC >/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void switchBlockStatementGroups():
{/*@bgen(jjtree) switchBlockStatementGroups */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHBLOCKSTATEMENTGROUPS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) switchBlockStatementGroups */
        try {
/*@egen*/
	switchBlockStatementGroup() switchBlockStatementGroups1()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void switchBlockStatementGroups1():
{/*@bgen(jjtree) switchBlockStatementGroups1 */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHBLOCKSTATEMENTGROUPS1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) switchBlockStatementGroups1 */
        try {
/*@egen*/
	switchBlockStatementGroup() switchBlockStatementGroups1() |/*@bgen(jjtree)*/
                                                                    {
                                                                      jjtree.closeNodeScope(jjtn000, true);
                                                                      jjtc000 = false;
                                                                    }
/*@egen*/ { }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void switchBlockStatementGroup():
{/*@bgen(jjtree) switchBlockStatementGroup */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHBLOCKSTATEMENTGROUP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) switchBlockStatementGroup */
        try {
/*@egen*/
	switchLabels() blockStatements()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void switchLabels():
{/*@bgen(jjtree) switchLabels */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHLABELS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) switchLabels */
        try {
/*@egen*/
	switchLabel() switchLabels1()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void switchLabels1():
{/*@bgen(jjtree) switchLabels1 */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHLABELS1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) switchLabels1 */
        try {
/*@egen*/
	switchLabel() switchLabels1() |/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/ { }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void switchLabel():
{/*@bgen(jjtree) switchLabel */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHLABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) switchLabel */
  try {
/*@egen*/
  < CASE > constantExpression() < DPOINTS >
|  < _DEFAULT > < DPOINTS >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void whileStatement():
{/*@bgen(jjtree) whileStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) whileStatement */
  try {
/*@egen*/
  < WHILE > <PARTA > expression() < PARTC > statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void whileStatementNoShortIf():
{/*@bgen(jjtree) whileStatementNoShortIf */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTATEMENTNOSHORTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) whileStatementNoShortIf */
  try {
/*@egen*/
  < WHILE > <PARTA > expression() < PARTC > statementNoShortIf()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void doStatement():
{/*@bgen(jjtree) doStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTDOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) doStatement */
  try {
/*@egen*/
  < DO > statement() < WHILE > <PARTA > expression() < PARTC > < SEMIC >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void forStatement():
{/*@bgen(jjtree) forStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) forStatement */
  try {
/*@egen*/
  < FOR > < PARTA > forStatement1() < PARTC > statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void forStatement1():
{/*@bgen(jjtree) forStatement1 */
  SimpleNode jjtn000 = new SimpleNode(JJTFORSTATEMENT1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) forStatement1 */
  try {
/*@egen*/
  LOOKAHEAD(3) forInit() < SEMIC > expression() <SEMIC> forUpdate() 
  | type() <ID> <DPOINTS> expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void forStatementNoShortIf():
{/*@bgen(jjtree) forStatementNoShortIf */
  SimpleNode jjtn000 = new SimpleNode(JJTFORSTATEMENTNOSHORTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) forStatementNoShortIf */
  try {
/*@egen*/
  < FOR > <PARTA > forInit() < SEMIC > expression()  < SEMIC > forUpdate() < PARTC > statementNoShortIf()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void forInit():
{/*@bgen(jjtree) forInit */
  SimpleNode jjtn000 = new SimpleNode(JJTFORINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) forInit */
         try {
/*@egen*/
  	 LOOKAHEAD(3) statementExpressionList()
	| localVariableDeclaration()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void forUpdate():
{/*@bgen(jjtree) forUpdate */
  SimpleNode jjtn000 = new SimpleNode(JJTFORUPDATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) forUpdate */
        try {
/*@egen*/
  	statementExpressionList()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void statementExpressionList():
{/*@bgen(jjtree) statementExpressionList */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) statementExpressionList */
        try {
/*@egen*/
  	statementExpression() statementExpressionList1()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void statementExpressionList1():
{/*@bgen(jjtree) statementExpressionList1 */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTEXPRESSIONLIST1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) statementExpressionList1 */
        try {
/*@egen*/
	< COMMA > statementExpression() statementExpressionList1() |/*@bgen(jjtree)*/
                                                                     {
                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                       jjtc000 = false;
                                                                     }
/*@egen*/ { }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void breakStatement():
{/*@bgen(jjtree) breakStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) breakStatement */
  try {
/*@egen*/
  < BREAK > (< ID >)? < SEMIC >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void continueStatement():
{/*@bgen(jjtree) continueStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) continueStatement */
  try {
/*@egen*/
  < CONTINUE > (< ID >)? < SEMIC >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void returnStatement():
{/*@bgen(jjtree) returnStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) returnStatement */
  try {
/*@egen*/
  < RETURN > (expression())? < SEMIC >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void throwsStatement():
{/*@bgen(jjtree) throwsStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTTHROWSSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) throwsStatement */
  try {
/*@egen*/
  < THROW > expression() < SEMIC >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void synchronizedStatement():
{/*@bgen(jjtree) synchronizedStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSYNCHRONIZEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) synchronizedStatement */
  try {
/*@egen*/
  < SYNCHRONIZED > < PARTA > expression() < PARTC > block()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void tryStatement():
{/*@bgen(jjtree) tryStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTTRYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tryStatement */
         try {
/*@egen*/
  	 LOOKAHEAD(3) < TRY > block() catches()
	| < TRY > block() (catches())? finallys()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void catches():
{/*@bgen(jjtree) catches */
  SimpleNode jjtn000 = new SimpleNode(JJTCATCHES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) catches */
        try {
/*@egen*/
  	catchClause() catches1()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void catches1():
{/*@bgen(jjtree) catches1 */
  SimpleNode jjtn000 = new SimpleNode(JJTCATCHES1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) catches1 */
        try {
/*@egen*/
	catchClause() catches1() |/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                   }
/*@egen*/ { }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void catchClause():
{/*@bgen(jjtree) catchClause */
  SimpleNode jjtn000 = new SimpleNode(JJTCATCHCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) catchClause */
        try {
/*@egen*/
  	< CATCH > <PARTA> formalParameter() < PARTC > block()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void finallys():
{/*@bgen(jjtree) finallys */
  SimpleNode jjtn000 = new SimpleNode(JJTFINALLYS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) finallys */
        try {
/*@egen*/
	< FINALLY > block()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void constantExpression() :
{/*@bgen(jjtree) constantExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTCONSTANTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) constantExpression */
        try {
/*@egen*/
	expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
