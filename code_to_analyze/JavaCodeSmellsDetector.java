/* Generated By:JJTree&JavaCC: Do not edit this line. JavaCodeSmellsDetector.java */
package jcc;

import java.io.*;
import java.util.*;
import main.*;

public class JavaCodeSmellsDetector/*@bgen(jjtree)*/implements JavaCodeSmellsDetectorTreeConstants {/*@bgen(jjtree)*/
	protected static JJTJavaCodeSmellsDetectorState jjtree = new JJTJavaCodeSmellsDetectorState();static SymbolTable st= new SymbolTable();

	public static void main(String[] args ) throws ParseException, IOException {
		try {
			FileInputStream file = new FileInputStream(args[0]);
			JavaCodeSmellsDetector detector = new JavaCodeSmellsDetector(file);

			ASTcompilationUnit astCompilationUnit = (ASTcompilationUnit) detector.compilationUnit();
			astCompilationUnit.dump("");

			Report report = new Report("MetricsReport.csv", "CodeSmellsReport.csv");
			JavaCodeSmellsDetectorVisitor v = new JavaCodeSmellsDetectorVisitorImplementation();
			astCompilationUnit.jjtAccept(v, report);
		} catch (Exception e) {
			System.out.println("Oops.");
			System.out.println(e.getMessage());
		}
	}

	static final public SimpleNode compilationUnit() throws ParseException {
		/*@bgen(jjtree) compilationUnit */
		ASTcompilationUnit jjtn000 = new ASTcompilationUnit(JJTCOMPILATIONUNIT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			switch (/*/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case PACKAGE:
					packageDeclaration();
					break;
				default:
					jj_la1[0] = jj_gen;
					;
			}
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case IMPORT:
					importDeclarations();
					break;
				default:
					jj_la1[1] = jj_gen;
					;
			}
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case ABSTRACT:
				case CLASS:
				case FINAL:
				case INTERFACE:
				case PUBLIC:
				case SEMIC:
					typeDeclarations();
					break;
				default:
					jj_la1[2] = jj_gen;
					;
			}
			eof();
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{if (true) return jjtn000;}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	static final public void eof() throws ParseException {
		/*@bgen(jjtree) eof */
		ASTeof jjtn000 = new ASTeof(JJTEOF);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(0);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void packageDeclaration() throws ParseException {
		/*@bgen(jjtree) packageDeclaration */
		ASTpackageDeclaration jjtn000 = new ASTpackageDeclaration(JJTPACKAGEDECLARATION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(PACKAGE);
			packageName();
			jj_consume_token(SEMIC);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void packageName() throws ParseException {
		jj_consume_token(ID);
		packageName1();
	}

	static final public void packageName1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case DOT:
				jj_consume_token(DOT);
				switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
					case ID:
						jj_consume_token(ID);
						break;
					case ARITOP_HP:
						jj_consume_token(ARITOP_HP);
						break;
					default:
						jj_la1[3] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
				packageName1();
				break;
			default:
				jj_la1[4] = jj_gen;

		}
	}

	static final public void importDeclarations() throws ParseException {
		importDeclaration();
		importDeclarations1();
	}

	static final public void importDeclarations1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case IMPORT:
				importDeclaration();
				importDeclarations1();
				break;
			default:
				jj_la1[5] = jj_gen;

		}
	}

	static final public void importDeclaration() throws ParseException {
		/*@bgen(jjtree) importDeclaration */
		ASTimportDeclaration jjtn000 = new ASTimportDeclaration(JJTIMPORTDECLARATION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(IMPORT);
			packageName();
			jj_consume_token(SEMIC);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void typeDeclarations() throws ParseException {
		typeDeclaration();
		typeDeclarations1();
	}

	static final public void typeDeclarations1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case ABSTRACT:
			case CLASS:
			case FINAL:
			case INTERFACE:
			case PUBLIC:
			case SEMIC:
				typeDeclaration();
				typeDeclarations1();
				break;
			default:
				jj_la1[6] = jj_gen;

		}
	}

	static final public void typeDeclaration() throws ParseException {
		if (jj_2_1(3)) {
			classDeclaration();
		} else {
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case ABSTRACT:
				case FINAL:
				case INTERFACE:
				case PUBLIC:
					interfaceDeclaration();
					break;
				case SEMIC:
					jj_consume_token(SEMIC);
					break;
				default:
					jj_la1[7] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		}
	}

	static final public void classDeclaration() throws ParseException {
		/*@bgen(jjtree) classDeclaration */
		ASTclassDeclaration jjtn000 = new ASTclassDeclaration(JJTCLASSDECLARATION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);Token t;
		try {
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case ABSTRACT:
				case FINAL:
				case PUBLIC:
					classOrInterfaceModifiers();
					break;
				default:
					jj_la1[8] = jj_gen;
					;
			}
			jj_consume_token(CLASS);
			t = jj_consume_token(ID);
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case EXTENDS:
					extendsList();
					break;
				default:
					jj_la1[9] = jj_gen;
					;
			}
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case IMPLEMENTS:
					implementsList();
					break;
				default:
					jj_la1[10] = jj_gen;
					;
			}
			classBody();
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			jjtn000.value = t;
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void classOrInterfaceModifiers() throws ParseException {
		classOrInterfaceModifier();
		classOrInterfaceModifiers1();
	}

	static final public void classOrInterfaceModifiers1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case ABSTRACT:
			case FINAL:
			case PUBLIC:
				classOrInterfaceModifier();
				classOrInterfaceModifiers1();
				break;
			default:
				jj_la1[11] = jj_gen;

		}
	}

	static final public void classOrInterfaceModifier() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case PUBLIC:
				jj_consume_token(PUBLIC);
				break;
			case ABSTRACT:
				jj_consume_token(ABSTRACT);
				break;
			case FINAL:
				jj_consume_token(FINAL);
				break;
			default:
				jj_la1[12] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
	}

	static final public void superConstruct() throws ParseException {
		/*@bgen(jjtree) superConstruct */
		ASTsuperConstruct jjtn000 = new ASTsuperConstruct(JJTSUPERCONSTRUCT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(EXTENDS);
			classOrInterfaceType();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void implementsList() throws ParseException {
		/*@bgen(jjtree) implementsList */
		ASTimplementsList jjtn000 = new ASTimplementsList(JJTIMPLEMENTSLIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(IMPLEMENTS);
			classOrInterfaceType();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void interfaceDeclaration() throws ParseException {
		/*@bgen(jjtree) interfaceDeclaration */
		ASTinterfaceDeclaration jjtn000 = new ASTinterfaceDeclaration(JJTINTERFACEDECLARATION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);Token t;
		try {
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case ABSTRACT:
				case FINAL:
				case PUBLIC:
					classOrInterfaceModifiers();
					break;
				default:
					jj_la1[13] = jj_gen;
					;
			}
			jj_consume_token(INTERFACE);
			t = jj_consume_token(ID);
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case EXTENDS:
					extendsList();
					break;
				default:
					jj_la1[14] = jj_gen;
					;
			}
			interfaceBody();
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			jjtn000.value = t;
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void interfaceBody() throws ParseException {
		/*@bgen(jjtree) interfaceBody */
		ASTinterfaceBody jjtn000 = new ASTinterfaceBody(JJTINTERFACEBODY);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(PARGA);
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case ABSTRACT:
				case FINAL:
				case PUBLIC:
				case STATIC:
					interfaceMemberDeclarations();
					break;
				default:
					jj_la1[15] = jj_gen;
					;
			}
			jj_consume_token(PARGC);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void interfaceMemberDeclarations() throws ParseException {
		interfaceMemberDeclaration();
		interfaceMemberDeclarations1();
	}

	static final public void interfaceMemberDeclarations1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case ABSTRACT:
			case FINAL:
			case PUBLIC:
			case STATIC:
				interfaceMemberDeclaration();
				interfaceMemberDeclarations1();
				break;
			default:
				jj_la1[16] = jj_gen;

		}
	}

	static final public void interfaceMemberDeclaration() throws ParseException {
		interfaceMemberModifiers();
		type();
		interfaceMemberDeclaration1();
	}

	static final public void interfaceMemberDeclaration1() throws ParseException {
		Token t;
		if (jj_2_2(2)) {
			ASTattributeDeclaration jjtn001 = new ASTattributeDeclaration(JJTATTRIBUTEDECLARATION);
			boolean jjtc001 = true;
			jjtree.openNodeScope(jjtn001);
			try {
				variableDeclarator(false);
				jj_consume_token(SEMIC);
			} catch (Throwable jjte001) {
				if (jjtc001) {
					jjtree.clearNodeScope(jjtn001);
					jjtc001 = false;
				} else {
					jjtree.popNode();
				}
				if (jjte001 instanceof RuntimeException) {
					{if (true) throw (RuntimeException)jjte001;}
				}
				if (jjte001 instanceof ParseException) {
					{if (true) throw (ParseException)jjte001;}
				}
				{if (true) throw (Error)jjte001;}
			} finally {
				if (jjtc001) {
					jjtree.closeNodeScope(jjtn001, true);
				}
			}
		} else {
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case ID:
					ASTabstractMethodDeclaration jjtn002 = new ASTabstractMethodDeclaration(JJTABSTRACTMETHODDECLARATION);
					boolean jjtc002 = true;
					jjtree.openNodeScope(jjtn002);
					try {
						t = methodDeclarator();
						switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
							case THROWS:
								throwsConstruct();
								break;
							default:
								jj_la1[17] = jj_gen;
								;
						}
						jj_consume_token(SEMIC);
						jjtree.closeNodeScope(jjtn002, true);
						jjtc002 = false;
						jjtn002.value = t;
					} catch (Throwable jjte002) {
						if (jjtc002) {
							jjtree.clearNodeScope(jjtn002);
							jjtc002 = false;
						} else {
							jjtree.popNode();
						}
						if (jjte002 instanceof RuntimeException) {
							{if (true) throw (RuntimeException)jjte002;}
						}
						if (jjte002 instanceof ParseException) {
							{if (true) throw (ParseException)jjte002;}
						}
						{if (true) throw (Error)jjte002;}
					} finally {
						if (jjtc002) {
							jjtree.closeNodeScope(jjtn002, true);
						}
					}
					break;
				default:
					jj_la1[18] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		}
	}

	static final public void interfaceMemberModifiers() throws ParseException {
		interfaceMemberModifier();
		interfaceMemberModifiers1();
	}

	static final public void interfaceMemberModifiers1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case ABSTRACT:
			case FINAL:
			case PUBLIC:
			case STATIC:
				interfaceMemberModifier();
				interfaceMemberModifiers1();
				break;
			default:
				jj_la1[19] = jj_gen;

		}
	}

	static final public void interfaceMemberModifier() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case PUBLIC:
				jj_consume_token(PUBLIC);
				break;
			case STATIC:
				jj_consume_token(STATIC);
				break;
			case FINAL:
				jj_consume_token(FINAL);
				break;
			case ABSTRACT:
				jj_consume_token(ABSTRACT);
				break;
			default:
				jj_la1[20] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
	}

	static final public Token methodDeclarator() throws ParseException {
		Token t;
		t = jj_consume_token(ID);
		jj_consume_token(PARTA);
		formalParameterList();
		jj_consume_token(PARTC);
		{if (true) return t;}
		throw new Error("Missing return statement in function");
	}

	static final public void methodBody() throws ParseException {
		/*@bgen(jjtree) methodBody */
		ASTmethodBody jjtn000 = new ASTmethodBody(JJTMETHODBODY);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case PARGA:
					block();
					break;
				case SEMIC:
					jj_consume_token(SEMIC);
					break;
				default:
					jj_la1[21] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void extendsList() throws ParseException {
		/*@bgen(jjtree) extendsList */
		ASTextendsList jjtn000 = new ASTextendsList(JJTEXTENDSLIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(EXTENDS);
			classOrInterfaceType();
			extendsList1();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void extendsList1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case COMMA:
				jj_consume_token(COMMA);
				classOrInterfaceType();
				extendsList1();
				break;
			default:
				jj_la1[22] = jj_gen;

		}
	}

	static final public void objectType() throws ParseException {
		jj_consume_token(ID);
		classOrInterfaceType1();
	}

	static final public void classOrInterfaceType() throws ParseException {
		jj_consume_token(ID);
		classOrInterfaceType1();
	}

	static final public void classOrInterfaceType1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case MINOR:
				jj_consume_token(MINOR);
				jj_consume_token(ID);
				classOrInterfaceType2();
				break;
			default:
				jj_la1[23] = jj_gen;

		}
	}

	static final public void classOrInterfaceType2() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case COMMA:
				jj_consume_token(COMMA);
				jj_consume_token(ID);
				jj_consume_token(MAJOR);
				break;
			case MAJOR:
				jj_consume_token(MAJOR);
				break;
			default:
				jj_la1[24] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
	}

	static final public void classBody() throws ParseException {
		/*@bgen(jjtree) classBody */
		ASTclassBody jjtn000 = new ASTclassBody(JJTCLASSBODY);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(PARGA);
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FINAL:
				case FLOAT:
				case INT:
				case LONG:
				case PRIVATE:
				case PROTECTED:
				case PUBLIC:
				case SHORT:
				case STATIC:
				case TRANSIENT:
				case VOID:
				case VOLATILE:
				case ID:
					classBodyDeclarations();
					break;
				default:
					jj_la1[25] = jj_gen;
					;
			}
			jj_consume_token(PARGC);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void classBodyDeclarations() throws ParseException {
		classBodyDeclaration();
		classBodyDeclarations1();
	}

	static final public void classBodyDeclarations1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FINAL:
			case FLOAT:
			case INT:
			case LONG:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case SHORT:
			case STATIC:
			case TRANSIENT:
			case VOID:
			case VOLATILE:
			case ID:
				classBodyDeclaration();
				classBodyDeclarations1();
				break;
			default:
				jj_la1[26] = jj_gen;

		}
	}

	static final public void classBodyDeclaration() throws ParseException {
		Token t = null;
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case FINAL:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case TRANSIENT:
			case VOLATILE:
				t = classMemberModifiers();
				break;
			default:
				jj_la1[27] = jj_gen;
				;
		}
		classBodyDeclaration1(t);
	}

	static final public void classBodyDeclaration1(Token t) throws ParseException {
		if (jj_2_3(2)) {
			classMemberDeclaration(t);
		} else {
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case ID:
					constructorDeclaration(t);
					break;
				default:
					jj_la1[28] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		}
	}

	static final public void classMemberDeclaration(Token t) throws ParseException {
		type();
		classMemberDeclaration1(t);
	}

	static final public void classMemberDeclaration1(Token m) throws ParseException {
		Token t = null;
		if (jj_2_4(2)) {
			ASTfieldDeclaration jjtn001 = new ASTfieldDeclaration(JJTFIELDDECLARATION);
			boolean jjtc001 = true;
			jjtree.openNodeScope(jjtn001);
			try {
				variableDeclarators(true);
				jj_consume_token(SEMIC);
			} catch (Throwable jjte001) {
				if (jjtc001) {
					jjtree.clearNodeScope(jjtn001);
					jjtc001 = false;
				} else {
					jjtree.popNode();
				}
				if (jjte001 instanceof RuntimeException) {
					{if (true) throw (RuntimeException)jjte001;}
				}
				if (jjte001 instanceof ParseException) {
					{if (true) throw (ParseException)jjte001;}
				}
				{if (true) throw (Error)jjte001;}
			} finally {
				if (jjtc001) {
					jjtree.closeNodeScope(jjtn001, true);
				}
			}
		} else {
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case ID:
					ASTmethodDeclaration jjtn002 = new ASTmethodDeclaration(JJTMETHODDECLARATION);
					boolean jjtc002 = true;
					jjtree.openNodeScope(jjtn002);
					try {
						t = methodDeclarator();
						switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
							case THROWS:
								throwsConstruct();
								break;
							default:
								jj_la1[29] = jj_gen;
								;
						}
						methodBody();
						jjtree.closeNodeScope(jjtn002, true);
						jjtc002 = false;
						ValueNode vn = new ValueNode();
						vn.id = t;
						vn.modifier = m;
						jjtn002.value = vn;
					} catch (Throwable jjte002) {
						if (jjtc002) {
							jjtree.clearNodeScope(jjtn002);
							jjtc002 = false;
						} else {
							jjtree.popNode();
						}
						if (jjte002 instanceof RuntimeException) {
							{if (true) throw (RuntimeException)jjte002;}
						}
						if (jjte002 instanceof ParseException) {
							{if (true) throw (ParseException)jjte002;}
						}
						{if (true) throw (Error)jjte002;}
					} finally {
						if (jjtc002) {
							jjtree.closeNodeScope(jjtn002, true);
						}
					}
					break;
				default:
					jj_la1[30] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		}
	}

	static final public Token classMemberModifiers() throws ParseException {
		Token t = null;
		t = classMemberModifier();
		classMemberModifiers1();
		{if (true) return t;}
		throw new Error("Missing return statement in function");
	}

	static final public void classMemberModifiers1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case FINAL:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case TRANSIENT:
			case VOLATILE:
				classMemberModifier();
				classMemberModifiers1();
				break;
			default:
				jj_la1[31] = jj_gen;

		}
	}

	static final public Token classMemberModifier() throws ParseException {
		Token t = null;
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case PUBLIC:
				t = jj_consume_token(PUBLIC);
				break;
			case PROTECTED:
				t = jj_consume_token(PROTECTED);
				break;
			case PRIVATE:
				t = jj_consume_token(PRIVATE);
				break;
			case STATIC:
				t = jj_consume_token(STATIC);
				break;
			case FINAL:
				t = jj_consume_token(FINAL);
				break;
			case TRANSIENT:
				t = jj_consume_token(TRANSIENT);
				break;
			case VOLATILE:
				t = jj_consume_token(VOLATILE);
				break;
			default:
				jj_la1[32] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
		{if (true) return t;}
		throw new Error("Missing return statement in function");
	}

	static final public void variableDeclarators(boolean isFieldDeclaration) throws ParseException {
		variableDeclarator(isFieldDeclaration);
		variableDeclarators1(isFieldDeclaration);
	}

	static final public void variableDeclarators1(boolean isFieldDeclaration) throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case COMMA:
				jj_consume_token(COMMA);
				variableDeclarator(isFieldDeclaration);
				variableDeclarators1(isFieldDeclaration);
				break;
			default:
				jj_la1[33] = jj_gen;

		}
	}

	static final public void variableDeclarator(boolean isFieldDeclaration) throws ParseException {
		Token t;
		t = variableDeclaratorId();
		variableDeclarator1();
		if (isFieldDeclaration)
			install(t, true);
	}

	static final public void variableDeclarator1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case ASS:
				jj_consume_token(ASS);
				variableInitializer();
				break;
			default:
				jj_la1[34] = jj_gen;

		}
	}

	static final public void variableInitializer() throws ParseException {
		/*@bgen(jjtree) variableInitializer */
		ASTvariableInitializer jjtn000 = new ASTvariableInitializer(JJTVARIABLEINITIALIZER);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case PARGA:
					arrayInitializer();
					break;
				case FALSE:
				case NEW:
				case NULL:
				case SUPER:
				case THIS:
				case TRUE:
				case NUM:
				case ID:
				case ARITOP_LP:
				case PARTA:
				case NOT:
				case LITERAL:
				case CHARVALUE:
					expression();
					break;
				default:
					jj_la1[35] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void arrayInitializer() throws ParseException {
		/*@bgen(jjtree) arrayInitializer */
		ASTarrayInitializer jjtn000 = new ASTarrayInitializer(JJTARRAYINITIALIZER);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(PARGA);
			variableInitializers();
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case COMMA:
					jj_consume_token(COMMA);
					break;
				default:
					jj_la1[36] = jj_gen;
					;
			}
			jj_consume_token(PARGC);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void variableInitializers() throws ParseException {
		variableInitializer();
		variableInitializers1();
	}

	static final public void variableInitializers1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case COMMA:
				jj_consume_token(COMMA);
				variableInitializer();
				variableInitializers1();
				break;
			default:
				jj_la1[37] = jj_gen;

		}
	}

	static final public void constructorDeclaration(Token m) throws ParseException {
		/*@bgen(jjtree) constructorDeclaration */
		ASTconstructorDeclaration jjtn000 = new ASTconstructorDeclaration(JJTCONSTRUCTORDECLARATION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);Token t = null;
		try {
			t = constructorDeclarator();
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case THROWS:
					throwsConstruct();
					break;
				default:
					jj_la1[38] = jj_gen;
					;
			}
			constructorBody();
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			ValueNode vn = new ValueNode();
			vn.modifier = m;
			vn.id = t;
			jjtn000.value = vn;
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void constructorModifier() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case PUBLIC:
				jj_consume_token(PUBLIC);
				break;
			case PROTECTED:
				jj_consume_token(PROTECTED);
				break;
			case PRIVATE:
				jj_consume_token(PRIVATE);
				break;
			default:
				jj_la1[39] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
	}

	static final public Token constructorDeclarator() throws ParseException {
		Token t;
		t = jj_consume_token(ID);
		jj_consume_token(PARTA);
		formalParameterList();
		jj_consume_token(PARTC);
		{if (true) return t;}
		throw new Error("Missing return statement in function");
	}

	static final public void formalParameterList() throws ParseException {
		/*@bgen(jjtree) formalParameterList */
		ASTformalParameterList jjtn000 = new ASTformalParameterList(JJTFORMALPARAMETERLIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
				case VOID:
				case ID:
					formalParameter();
					formalParameterList1();
					break;
				default:
					jj_la1[40] = jj_gen;
					jjtree.closeNodeScope(jjtn000, true);
					jjtc000 = false;

			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void formalParameterList1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case COMMA:
				jj_consume_token(COMMA);
				formalParameter();
				formalParameterList1();
				break;
			default:
				jj_la1[41] = jj_gen;

		}
	}

	static final public void formalParameter() throws ParseException {
		/*@bgen(jjtree) formalParameter */
		ASTformalParameter jjtn000 = new ASTformalParameter(JJTFORMALPARAMETER);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			type();
			variableDeclaratorId();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public Token variableDeclaratorId() throws ParseException {
		Token t = null;
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case ID:
				t = jj_consume_token(ID);
				variableDeclaratorId1();
				break;
			case MINOR:
				objectDeclaratorId();
				break;
			default:
				jj_la1[42] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
		{if (true) return t;}
		throw new Error("Missing return statement in function");
	}

	static final public void objectDeclaratorId() throws ParseException {
		jj_consume_token(MINOR);
		jj_consume_token(ID);
		objectDeclaratorId1();
	}

	static final public void objectDeclaratorId1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case MAJOR:
				jj_consume_token(MAJOR);
				variableDeclaratorId1();
				jj_consume_token(ID);
				break;
			case COMMA:
				jj_consume_token(COMMA);
				jj_consume_token(ID);
				jj_consume_token(MAJOR);
				variableDeclaratorId1();
				jj_consume_token(ID);
				break;
			default:
				jj_la1[43] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
	}

	static final public void variableDeclaratorId1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case PARQA:
				jj_consume_token(PARQA);
				jj_consume_token(PARQC);
				variableDeclaratorId();
				break;
			default:
				jj_la1[44] = jj_gen;

		}
	}

	static final public void type() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case VOID:
				jj_consume_token(VOID);
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				primitiveType();
				break;
			case ID:
				objectType();
				break;
			default:
				jj_la1[45] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
		type1();
	}

	static final public void type1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case PARQA:
				jj_consume_token(PARQA);
				jj_consume_token(PARQC);
				type1();
				break;
			default:
				jj_la1[46] = jj_gen;

		}
	}

	static final public void primitiveType() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case BYTE:
				jj_consume_token(BYTE);
				break;
			case SHORT:
				jj_consume_token(SHORT);
				break;
			case INT:
				jj_consume_token(INT);
				break;
			case LONG:
				jj_consume_token(LONG);
				break;
			case CHAR:
				jj_consume_token(CHAR);
				break;
			case BOOLEAN:
				jj_consume_token(BOOLEAN);
				break;
			case FLOAT:
				jj_consume_token(FLOAT);
				break;
			case DOUBLE:
				jj_consume_token(DOUBLE);
				break;
			default:
				jj_la1[47] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
	}

	static final public void throwsConstruct() throws ParseException {
		/*@bgen(jjtree) throwsConstruct */
		ASTthrowsConstruct jjtn000 = new ASTthrowsConstruct(JJTTHROWSCONSTRUCT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(THROWS);
			classTypeList();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void classTypeList() throws ParseException {
		classOrInterfaceType();
		classTypeList1();
	}

	static final public void classTypeList1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case COMMA:
				jj_consume_token(COMMA);
				classOrInterfaceType();
				classTypeList1();
				break;
			default:
				jj_la1[48] = jj_gen;

		}
	}

	static final public void constructorBody() throws ParseException {
		/*@bgen(jjtree) constructorBody */
		ASTconstructorBody jjtn000 = new ASTconstructorBody(JJTCONSTRUCTORBODY);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(PARGA);
			label_1:
			while (true) {
				switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
					case BOOLEAN:
					case BREAK:
					case BYTE:
					case CHAR:
					case CONTINUE:
					case DO:
					case DOUBLE:
					case FLOAT:
					case FOR:
					case IF:
					case INT:
					case LONG:
					case NEW:
					case RETURN:
					case SHORT:
					case SUPER:
					case SWITCH:
					case SYNCHRONIZED:
					case THIS:
					case THROW:
					case TRY:
					case VOID:
					case WHILE:
					case ID:
					case ARITOP_LP:
					case PARGA:
					case SEMIC:
						;
						break;
					default:
						jj_la1[49] = jj_gen;
						break label_1;
				}
				constructorBody1();
			}
			jj_consume_token(PARGC);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void constructorBody1() throws ParseException {
		if (jj_2_5(2)) {
			blockStatements();
		} else if (jj_2_6(2)) {
			ASTthisMethod jjtn001 = new ASTthisMethod(JJTTHISMETHOD);
			boolean jjtc001 = true;
			jjtree.openNodeScope(jjtn001);
			try {
				jj_consume_token(THIS);
				jj_consume_token(PARTA);
				switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
					case FALSE:
					case NEW:
					case NULL:
					case SUPER:
					case THIS:
					case TRUE:
					case NUM:
					case ID:
					case ARITOP_LP:
					case PARTA:
					case NOT:
					case LITERAL:
					case CHARVALUE:
						argumentList();
						break;
					default:
						jj_la1[50] = jj_gen;
						;
				}
				jj_consume_token(PARTC);
				jj_consume_token(SEMIC);
			} catch (Throwable jjte001) {
				if (jjtc001) {
					jjtree.clearNodeScope(jjtn001);
					jjtc001 = false;
				} else {
					jjtree.popNode();
				}
				if (jjte001 instanceof RuntimeException) {
					{if (true) throw (RuntimeException)jjte001;}
				}
				if (jjte001 instanceof ParseException) {
					{if (true) throw (ParseException)jjte001;}
				}
				{if (true) throw (Error)jjte001;}
			} finally {
				if (jjtc001) {
					jjtree.closeNodeScope(jjtn001, true);
				}
			}
		} else {
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case SUPER:
					ASTsuperMethod jjtn002 = new ASTsuperMethod(JJTSUPERMETHOD);
					boolean jjtc002 = true;
					jjtree.openNodeScope(jjtn002);
					try {
						jj_consume_token(SUPER);
						jj_consume_token(PARTA);
						switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
							case FALSE:
							case NEW:
							case NULL:
							case SUPER:
							case THIS:
							case TRUE:
							case NUM:
							case ID:
							case ARITOP_LP:
							case PARTA:
							case NOT:
							case LITERAL:
							case CHARVALUE:
								argumentList();
								break;
							default:
								jj_la1[51] = jj_gen;
								;
						}
						jj_consume_token(PARTC);
						jj_consume_token(SEMIC);
					} catch (Throwable jjte002) {
						if (jjtc002) {
							jjtree.clearNodeScope(jjtn002);
							jjtc002 = false;
						} else {
							jjtree.popNode();
						}
						if (jjte002 instanceof RuntimeException) {
							{if (true) throw (RuntimeException)jjte002;}
						}
						if (jjte002 instanceof ParseException) {
							{if (true) throw (ParseException)jjte002;}
						}
						{if (true) throw (Error)jjte002;}
					} finally {
						if (jjtc002) {
							jjtree.closeNodeScope(jjtn002, true);
						}
					}
					break;
				default:
					jj_la1[52] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		}
	}

	static final public void blockStatements() throws ParseException {
		blockStatement();
		blockStatements1();
	}

	static final public void blockStatements1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case BOOLEAN:
			case BREAK:
			case BYTE:
			case CHAR:
			case CONTINUE:
			case DO:
			case DOUBLE:
			case FLOAT:
			case FOR:
			case IF:
			case INT:
			case LONG:
			case NEW:
			case RETURN:
			case SHORT:
			case SUPER:
			case SWITCH:
			case SYNCHRONIZED:
			case THIS:
			case THROW:
			case TRY:
			case VOID:
			case WHILE:
			case ID:
			case ARITOP_LP:
			case PARGA:
			case SEMIC:
				blockStatement();
				blockStatements1();
				break;
			default:
				jj_la1[53] = jj_gen;

		}
	}

	static final public void blockStatement() throws ParseException {
		try {
			if (jj_2_7(3)) {
				localVariableDeclarationStatement();
			} else {
				switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
					case BREAK:
					case CONTINUE:
					case DO:
					case FOR:
					case IF:
					case NEW:
					case RETURN:
					case SUPER:
					case SWITCH:
					case SYNCHRONIZED:
					case THIS:
					case THROW:
					case TRY:
					case WHILE:
					case ID:
					case ARITOP_LP:
					case PARGA:
					case SEMIC:
						statement();
						break;
					default:
						jj_la1[54] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
			}
		} catch (ParseException e) {
			error_skip(SEMIC);
		}
	}

	static final public void localVariableDeclarationStatement() throws ParseException {
		/*@bgen(jjtree) localVariableDeclarationStatement */
		ASTlocalVariableDeclarationStatement jjtn000 = new ASTlocalVariableDeclarationStatement(JJTLOCALVARIABLEDECLARATIONSTATEMENT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			localVariableDeclaration();
			jj_consume_token(SEMIC);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void localVariableDeclaration() throws ParseException {
		type();
		variableDeclarators(false);
	}

	static final public void argumentList() throws ParseException {
		/*@bgen(jjtree) argumentList */
		ASTargumentList jjtn000 = new ASTargumentList(JJTARGUMENTLIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			ASTargument jjtn001 = new ASTargument(JJTARGUMENT);
			boolean jjtc001 = true;
			jjtree.openNodeScope(jjtn001);
			try {
				expression();
			} catch (Throwable jjte001) {
				if (jjtc001) {
					jjtree.clearNodeScope(jjtn001);
					jjtc001 = false;
				} else {
					jjtree.popNode();
				}
				if (jjte001 instanceof RuntimeException) {
					{if (true) throw (RuntimeException)jjte001;}
				}
				if (jjte001 instanceof ParseException) {
					{if (true) throw (ParseException)jjte001;}
				}
				{if (true) throw (Error)jjte001;}
			} finally {
				if (jjtc001) {
					jjtree.closeNodeScope(jjtn001, true);
				}
			}
			argumentList1();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void argumentList1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case COMMA:
				ASTargument jjtn001 = new ASTargument(JJTARGUMENT);
				boolean jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				try {
					jj_consume_token(COMMA);
					expression();
					argumentList1();
				} catch (Throwable jjte001) {
					if (jjtc001) {
						jjtree.clearNodeScope(jjtn001);
						jjtc001 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte001 instanceof RuntimeException) {
						{if (true) throw (RuntimeException)jjte001;}
					}
					if (jjte001 instanceof ParseException) {
						{if (true) throw (ParseException)jjte001;}
					}
					{if (true) throw (Error)jjte001;}
				} finally {
					if (jjtc001) {
						jjtree.closeNodeScope(jjtn001, true);
					}
				}
				break;
			default:
				jj_la1[55] = jj_gen;

		}
	}

	static final public void expression() throws ParseException {
		/*@bgen(jjtree) expression */
		ASTexpression jjtn000 = new ASTexpression(JJTEXPRESSION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			assignmentExpression();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void assignmentExpression() throws ParseException {
		if (jj_2_8(3)) {
			conditionalExpression();
		} else {
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case SUPER:
				case THIS:
				case ID:
					assignment();
					break;
				default:
					jj_la1[56] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		}
	}

	static final public void assignment() throws ParseException {
		leftHandSide();
		assignmentOperator();
		assignmentExpression();
	}

	static final public void leftHandSide() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case SUPER:
			case THIS:
				fieldAccess();
				break;
			case ID:
				identifierName();
				leftHandSide1();
				break;
			default:
				jj_la1[57] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
	}

	static final public void leftHandSide1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case PARQA:
				jj_consume_token(PARQA);
				expression();
				jj_consume_token(PARQC);
				break;
			default:
				jj_la1[58] = jj_gen;

		}
	}

	static final public void fieldAccess() throws ParseException {
		/*@bgen(jjtree) fieldAccess */
		ASTfieldAccess jjtn000 = new ASTfieldAccess(JJTFIELDACCESS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case THIS:
					jj_consume_token(THIS);
					jj_consume_token(DOT);
					jj_consume_token(ID);
					break;
				case SUPER:
					jj_consume_token(SUPER);
					jj_consume_token(DOT);
					jj_consume_token(ID);
					break;
				default:
					jj_la1[59] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void assignmentOperator() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case MULASS:
				jj_consume_token(MULASS);
				break;
			case DIVASS:
				jj_consume_token(DIVASS);
				break;
			case ADDASS:
				jj_consume_token(ADDASS);
				break;
			case SUBASS:
				jj_consume_token(SUBASS);
				break;
			case ASS:
				jj_consume_token(ASS);
				break;
			default:
				jj_la1[60] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
	}

	static final public void referenceType() throws ParseException {
		type();
		referenceType1();
	}

	static final public void referenceType1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case PARQA:
				jj_consume_token(PARQA);
				jj_consume_token(PARQC);
				referenceType1();
				break;
			default:
				jj_la1[61] = jj_gen;

		}
	}

	static final public void conditionalExpression() throws ParseException {
		exprLogical();
	}

	static final public void exprLogical() throws ParseException {
		andExpression();
	}

	static final public void andExpression() throws ParseException {
		ASTand jjtn001 = new ASTand(JJTAND);
		boolean jjtc001 = true;
		jjtree.openNodeScope(jjtn001);
		try {
			orExpression();
			label_2:
			while (true) {
				switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
					case AND:
						;
						break;
					default:
						jj_la1[62] = jj_gen;
						break label_2;
				}
				jj_consume_token(AND);
				orExpression();
			}
		} catch (Throwable jjte001) {
			if (jjtc001) {
				jjtree.clearNodeScope(jjtn001);
				jjtc001 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte001 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte001;}
			}
			if (jjte001 instanceof ParseException) {
				{if (true) throw (ParseException)jjte001;}
			}
			{if (true) throw (Error)jjte001;}
		} finally {
			if (jjtc001) {
				jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
			}
		}
	}

	static final public void orExpression() throws ParseException {
		ASTor jjtn001 = new ASTor(JJTOR);
		boolean jjtc001 = true;
		jjtree.openNodeScope(jjtn001);
		try {
			logicalOperand();
			label_3:
			while (true) {
				switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
					case OR:
						;
						break;
					default:
						jj_la1[63] = jj_gen;
						break label_3;
				}
				jj_consume_token(OR);
				logicalOperand();
			}
		} catch (Throwable jjte001) {
			if (jjtc001) {
				jjtree.clearNodeScope(jjtn001);
				jjtc001 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte001 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte001;}
			}
			if (jjte001 instanceof ParseException) {
				{if (true) throw (ParseException)jjte001;}
			}
			{if (true) throw (Error)jjte001;}
		} finally {
			if (jjtc001) {
				jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
			}
		}
	}

	static final public void logicalOperand() throws ParseException {
		/*@bgen(jjtree) logicalOperand */
		ASTlogicalOperand jjtn000 = new ASTlogicalOperand(JJTLOGICALOPERAND);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			expr();
			if (jj_2_9(2)) {
				switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
					case RELOP:
						jj_consume_token(RELOP);
						break;
					case MAJOR:
						jj_consume_token(MAJOR);
						break;
					case MINOR:
						jj_consume_token(MINOR);
						break;
					case INSTANCEOF:
						jj_consume_token(INSTANCEOF);
						break;
					default:
						jj_la1[64] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
				expr();
			} else {
				;
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void expr() throws ParseException {
		lowPriorityExpression();
	}

	static final public void lowPriorityExpression() throws ParseException {
		ASTaritop_lp jjtn001 = new ASTaritop_lp(JJTARITOP_LP);
		boolean jjtc001 = true;
		jjtree.openNodeScope(jjtn001);
		try {
			highPriorityExpression();
			label_4:
			while (true) {
				switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
					case ARITOP_LP:
						;
						break;
					default:
						jj_la1[65] = jj_gen;
						break label_4;
				}
				jj_consume_token(ARITOP_LP);
				highPriorityExpression();
			}
		} catch (Throwable jjte001) {
			if (jjtc001) {
				jjtree.clearNodeScope(jjtn001);
				jjtc001 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte001 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte001;}
			}
			if (jjte001 instanceof ParseException) {
				{if (true) throw (ParseException)jjte001;}
			}
			{if (true) throw (Error)jjte001;}
		} finally {
			if (jjtc001) {
				jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
			}
		}
	}

	static final public void highPriorityExpression() throws ParseException {
		ASTaritop_hp jjtn001 = new ASTaritop_hp(JJTARITOP_HP);
		boolean jjtc001 = true;
		jjtree.openNodeScope(jjtn001);
		try {
			unaryExpression();
			label_5:
			while (true) {
				switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
					case ARITOP_HP:
						;
						break;
					default:
						jj_la1[66] = jj_gen;
						break label_5;
				}
				jj_consume_token(ARITOP_HP);
				unaryExpression();
			}
		} catch (Throwable jjte001) {
			if (jjtc001) {
				jjtree.clearNodeScope(jjtn001);
				jjtc001 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte001 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte001;}
			}
			if (jjte001 instanceof ParseException) {
				{if (true) throw (ParseException)jjte001;}
			}
			{if (true) throw (Error)jjte001;}
		} finally {
			if (jjtc001) {
				jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
			}
		}
	}

	static final public void unaryExpression() throws ParseException {
		/*@bgen(jjtree) unaryExpression */
		ASTunaryExpression jjtn000 = new ASTunaryExpression(JJTUNARYEXPRESSION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);ValueNode vn = null;
		try {
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case ID:
					vn = identifierName();
					unaryExpression1(vn);
					break;
				case NEW:
					classInstanceCreationExpression();
					break;
				case FALSE:
				case NULL:
				case TRUE:
				case NUM:
				case LITERAL:
				case CHARVALUE:
					literal();
					break;
				case ARITOP_LP:
					jj_consume_token(ARITOP_LP);
					unaryExpression();
					break;
				case NOT:
					jj_consume_token(NOT);
					unaryExpression();
					break;
				default:
					jj_la1[67] = jj_gen;
					if (jj_2_10(2)) {
						jj_consume_token(THIS);
						jj_consume_token(DOT);
						unaryExpression();
					} else {
						switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
							case THIS:
								jj_consume_token(THIS);
								break;
							case PARTA:
								jj_consume_token(PARTA);
								unaryExpression1bis();
								break;
							default:
								jj_la1[68] = jj_gen;
								jj_consume_token(-1);
								throw new ParseException();
						}
					}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void unaryExpression1(ValueNode vn) throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case PARTA:
				ASTmethodInvocation jjtn001 = new ASTmethodInvocation(JJTMETHODINVOCATION);
				boolean jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				try {
					jj_consume_token(PARTA);
					switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
						case FALSE:
						case NEW:
						case NULL:
						case SUPER:
						case THIS:
						case TRUE:
						case NUM:
						case ID:
						case ARITOP_LP:
						case PARTA:
						case NOT:
						case LITERAL:
						case CHARVALUE:
							argumentList();
							break;
						default:
							jj_la1[69] = jj_gen;
							;
					}
					jj_consume_token(PARTC);
					switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
						case DOT:
							jj_consume_token(DOT);
							unaryExpression();
							break;
						default:
							jj_la1[70] = jj_gen;
							;
					}
					jjtree.closeNodeScope(jjtn001, true);
					jjtc001 = false;
					jjtn001.value = vn;
				} catch (Throwable jjte001) {
					if (jjtc001) {
						jjtree.clearNodeScope(jjtn001);
						jjtc001 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte001 instanceof RuntimeException) {
						{if (true) throw (RuntimeException)jjte001;}
					}
					if (jjte001 instanceof ParseException) {
						{if (true) throw (ParseException)jjte001;}
					}
					{if (true) throw (Error)jjte001;}
				} finally {
					if (jjtc001) {
						jjtree.closeNodeScope(jjtn001, true);
					}
				}
				break;
			default:
				jj_la1[71] = jj_gen;
				if (jj_2_11(2)) {
					jj_consume_token(ARITOP_LP);
					jj_consume_token(ARITOP_LP);
				} else {
					switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
						case PARQA:
							ASTmethodInvocation jjtn002 = new ASTmethodInvocation(JJTMETHODINVOCATION);
							boolean jjtc002 = true;
							jjtree.openNodeScope(jjtn002);
							try {
								jj_consume_token(PARQA);
								expression();
								jj_consume_token(PARQC);
								jjtree.closeNodeScope(jjtn002, true);
								jjtc002 = false;
								jjtn002.value = vn;
							} catch (Throwable jjte002) {
								if (jjtc002) {
									jjtree.clearNodeScope(jjtn002);
									jjtc002 = false;
								} else {
									jjtree.popNode();
								}
								if (jjte002 instanceof RuntimeException) {
									{if (true) throw (RuntimeException)jjte002;}
								}
								if (jjte002 instanceof ParseException) {
									{if (true) throw (ParseException)jjte002;}
								}
								{if (true) throw (Error)jjte002;}
							} finally {
								if (jjtc002) {
									jjtree.closeNodeScope(jjtn002, true);
								}
							}
							break;
						default:
							jj_la1[72] = jj_gen;

					}
				}
		}
	}

	static final public void unaryExpression1bis() throws ParseException {
		if (jj_2_12(2)) {
			type();
			jj_consume_token(PARTC);
			unaryExpression();
		} else {
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case FALSE:
				case NEW:
				case NULL:
				case SUPER:
				case THIS:
				case TRUE:
				case NUM:
				case ID:
				case ARITOP_LP:
				case PARTA:
				case NOT:
				case LITERAL:
				case CHARVALUE:
					expression();
					jj_consume_token(PARTC);
					break;
				default:
					jj_la1[73] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		}
	}

	static final public void preIncrDecrExpression() throws ParseException {
		/*@bgen(jjtree) preIncrDecrExpression */
		ASTpreIncrDecrExpression jjtn000 = new ASTpreIncrDecrExpression(JJTPREINCRDECREXPRESSION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(ARITOP_LP);
			jj_consume_token(ARITOP_LP);
			unaryExpression();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public ValueNode identifierName() throws ParseException {
		/*@bgen(jjtree) identifierName */
		ASTidentifierName jjtn000 = new ASTidentifierName(JJTIDENTIFIERNAME);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);boolean isDotId; Token t;
		try {
			t = jj_consume_token(ID);
			isDotId = identifierName1(false);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			ValueNode vn = new ValueNode();
			SymbolTableEntry stE = st.get(t.image);
			vn.id = t;
			vn.isAttribute = isDotId;
			if (stE != null) {
				vn.isClassMember = stE.isClassMember();
			}
			jjtn000.value = vn;
			{if (true) return vn;}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	static final public boolean identifierName1(boolean isDotId) throws ParseException {
		/*@bgen(jjtree) identifierName1 */
		ASTidentifierName1 jjtn000 = new ASTidentifierName1(JJTIDENTIFIERNAME1);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case DOT:
					jj_consume_token(DOT);
					switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
						case ID:
							jj_consume_token(ID);
							break;
						case CLASS:
							jj_consume_token(CLASS);
							break;
						default:
							jj_la1[74] = jj_gen;
							jj_consume_token(-1);
							throw new ParseException();
					}
					identifierName1(true);
					jjtree.closeNodeScope(jjtn000, true);
					jjtc000 = false;
				{if (true) return true;}
				break;
				default:
					jj_la1[75] = jj_gen;
					jjtree.closeNodeScope(jjtn000, true);
					jjtc000 = false;
				{if (true) return isDotId;}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	static final public void classInstanceCreationExpression() throws ParseException {
		/*@bgen(jjtree) classInstanceCreationExpression */
		ASTclassInstanceCreationExpression jjtn000 = new ASTclassInstanceCreationExpression(JJTCLASSINSTANCECREATIONEXPRESSION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(NEW);
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case ID:
					classOrInterfaceType();
					break;
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					primitiveType();
					break;
				default:
					jj_la1[76] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
			classInstanceCreationExpression1();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void classInstanceCreationExpression1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case PARTA:
			case PARQA:
			case MINOR:
				classInstanceCreationExpression2();
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				primitiveType();
				dimExprs();
				switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
					case PARQA:
						dims();
						break;
					default:
						jj_la1[77] = jj_gen;
						;
				}
				break;
			default:
				jj_la1[78] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
	}

	static final public void classInstanceCreationExpression2() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case PARTA:
				jj_consume_token(PARTA);
				switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
					case FALSE:
					case NEW:
					case NULL:
					case SUPER:
					case THIS:
					case TRUE:
					case NUM:
					case ID:
					case ARITOP_LP:
					case PARTA:
					case NOT:
					case LITERAL:
					case CHARVALUE:
						argumentList();
						break;
					default:
						jj_la1[79] = jj_gen;
						;
				}
				jj_consume_token(PARTC);
				break;
			case MINOR:
				jj_consume_token(MINOR);
				switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
					case FALSE:
					case NEW:
					case NULL:
					case SUPER:
					case THIS:
					case TRUE:
					case NUM:
					case ID:
					case ARITOP_LP:
					case PARTA:
					case NOT:
					case LITERAL:
					case CHARVALUE:
						argumentList();
						break;
					default:
						jj_la1[80] = jj_gen;
						;
				}
				jj_consume_token(MAJOR);
				jj_consume_token(PARTA);
				switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
					case FALSE:
					case NEW:
					case NULL:
					case SUPER:
					case THIS:
					case TRUE:
					case NUM:
					case ID:
					case ARITOP_LP:
					case PARTA:
					case NOT:
					case LITERAL:
					case CHARVALUE:
						argumentList();
						break;
					default:
						jj_la1[81] = jj_gen;
						;
				}
				jj_consume_token(PARTC);
				break;
			case PARQA:
				dimExprs();
				switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
					case PARQA:
						dims();
						break;
					default:
						jj_la1[82] = jj_gen;
						;
				}
				break;
			default:
				jj_la1[83] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
	}

	static final public void dimExprs() throws ParseException {
		dimExpr();
		dimExprs1();
	}

	static final public void dimExprs1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case PARQA:
				dimExpr();
				dimExprs1();
				break;
			default:
				jj_la1[84] = jj_gen;

		}
	}

	static final public void dimExpr() throws ParseException {
		jj_consume_token(PARQA);
		expression();
		jj_consume_token(PARQC);
	}

	static final public void dims() throws ParseException {
		dims1();
		jj_consume_token(PARQA);
		jj_consume_token(PARQC);
	}

	static final public void dims1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case PARQA:
				jj_consume_token(PARQA);
				jj_consume_token(PARQC);
				dims1();
				break;
			default:
				jj_la1[85] = jj_gen;

		}
	}

	static final public void literal() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case FALSE:
			case TRUE:
				switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
					case TRUE:
						jj_consume_token(TRUE);
						break;
					case FALSE:
						jj_consume_token(FALSE);
						break;
					default:
						jj_la1[86] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
				break;
			case CHARVALUE:
				jj_consume_token(CHARVALUE);
				break;
			case LITERAL:
				jj_consume_token(LITERAL);
				break;
			case NUM:
				jj_consume_token(NUM);
				break;
			case NULL:
				jj_consume_token(NULL);
				break;
			default:
				jj_la1[87] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
	}

	static final public void statement() throws ParseException {
		if (jj_2_13(2)) {
			statementWithoutTrailingSubstatement();
		} else {
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case ID:
					labeledStatement();
					break;
				case IF:
					ifThenStatement();
					break;
				case WHILE:
					whileStatement();
					break;
				case FOR:
					forStatement();
					break;
				default:
					jj_la1[88] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		}
	}

	static final public void statementNoShortIf() throws ParseException {
		/*@bgen(jjtree) statementNoShortIf */
		ASTstatementNoShortIf jjtn000 = new ASTstatementNoShortIf(JJTSTATEMENTNOSHORTIF);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			if (jj_2_14(2)) {
				statementWithoutTrailingSubstatement();
			} else {
				switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
					case ID:
						labeledStatementNoShortIf();
						break;
					case IF:
						ifThenElseStatementNoShortIf();
						break;
					case WHILE:
						whileStatementNoShortIf();
						break;
					case FOR:
						forStatementNoShortIf();
						break;
					default:
						jj_la1[89] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void block() throws ParseException {
		jj_consume_token(PARGA);
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case BOOLEAN:
			case BREAK:
			case BYTE:
			case CHAR:
			case CONTINUE:
			case DO:
			case DOUBLE:
			case FLOAT:
			case FOR:
			case IF:
			case INT:
			case LONG:
			case NEW:
			case RETURN:
			case SHORT:
			case SUPER:
			case SWITCH:
			case SYNCHRONIZED:
			case THIS:
			case THROW:
			case TRY:
			case VOID:
			case WHILE:
			case ID:
			case ARITOP_LP:
			case PARGA:
			case SEMIC:
				blockStatements();
				break;
			default:
				jj_la1[90] = jj_gen;
				;
		}
		jj_consume_token(PARGC);
	}

	static final public void statementWithoutTrailingSubstatement() throws ParseException {
		try {
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case PARGA:
					block();
					break;
				case SEMIC:
					emptyStatement();
					break;
				case NEW:
				case SUPER:
				case THIS:
				case ID:
				case ARITOP_LP:
					expressionStatement();
					break;
				case SWITCH:
					switchStatement();
					break;
				case DO:
					doStatement();
					break;
				case BREAK:
					breakStatement();
					break;
				case CONTINUE:
					continueStatement();
					break;
				case RETURN:
					returnStatement();
					break;
				case SYNCHRONIZED:
					synchronizedStatement();
					break;
				case THROW:
					throwsStatement();
					break;
				case TRY:
					tryStatement();
					break;
				default:
					jj_la1[91] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (ParseException e) {
			error_skip(SEMIC);
		}
	}

	static final public void emptyStatement() throws ParseException {
		/*@bgen(jjtree) emptyStatement */
		ASTemptyStatement jjtn000 = new ASTemptyStatement(JJTEMPTYSTATEMENT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(SEMIC);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void labeledStatement() throws ParseException {
		/*@bgen(jjtree) labeledStatement */
		ASTlabeledStatement jjtn000 = new ASTlabeledStatement(JJTLABELEDSTATEMENT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(ID);
			jj_consume_token(DPOINTS);
			statement();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void labeledStatementNoShortIf() throws ParseException {
		/*@bgen(jjtree) labeledStatementNoShortIf */
		ASTlabeledStatementNoShortIf jjtn000 = new ASTlabeledStatementNoShortIf(JJTLABELEDSTATEMENTNOSHORTIF);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(ID);
			jj_consume_token(DPOINTS);
			statementNoShortIf();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void expressionStatement() throws ParseException {
		statementExpression();
		jj_consume_token(SEMIC);
	}

	static final public void statementExpression() throws ParseException {
		ValueNode vn = null;
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case ID:
				vn = identifierName();
				switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
					case ASS:
					case MULASS:
					case DIVASS:
					case ADDASS:
					case SUBASS:
						ASTassignmentStatement jjtn001 = new ASTassignmentStatement(JJTASSIGNMENTSTATEMENT);
						boolean jjtc001 = true;
						jjtree.openNodeScope(jjtn001);
						try {
							assignmentOperator();
							assignmentExpression();
						} catch (Throwable jjte001) {
							if (jjtc001) {
								jjtree.clearNodeScope(jjtn001);
								jjtc001 = false;
							} else {
								jjtree.popNode();
							}
							if (jjte001 instanceof RuntimeException) {
								{if (true) throw (RuntimeException)jjte001;}
							}
							if (jjte001 instanceof ParseException) {
								{if (true) throw (ParseException)jjte001;}
							}
							{if (true) throw (Error)jjte001;}
						} finally {
							if (jjtc001) {
								jjtree.closeNodeScope(jjtn001, true);
							}
						}
						break;
					case PARTA:
						ASTmethodInvocation jjtn002 = new ASTmethodInvocation(JJTMETHODINVOCATION);
						boolean jjtc002 = true;
						jjtree.openNodeScope(jjtn002);
						try {
							jj_consume_token(PARTA);
							switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
								case FALSE:
								case NEW:
								case NULL:
								case SUPER:
								case THIS:
								case TRUE:
								case NUM:
								case ID:
								case ARITOP_LP:
								case PARTA:
								case NOT:
								case LITERAL:
								case CHARVALUE:
									argumentList();
									break;
								default:
									jj_la1[92] = jj_gen;
									;
							}
							jj_consume_token(PARTC);
							methodInvocation1();
							jjtree.closeNodeScope(jjtn002, true);
							jjtc002 = false;
							jjtn002.value = vn;
						} catch (Throwable jjte002) {
							if (jjtc002) {
								jjtree.clearNodeScope(jjtn002);
								jjtc002 = false;
							} else {
								jjtree.popNode();
							}
							if (jjte002 instanceof RuntimeException) {
								{if (true) throw (RuntimeException)jjte002;}
							}
							if (jjte002 instanceof ParseException) {
								{if (true) throw (ParseException)jjte002;}
							}
							{if (true) throw (Error)jjte002;}
						} finally {
							if (jjtc002) {
								jjtree.closeNodeScope(jjtn002, true);
							}
						}
						break;
					case ARITOP_LP:
						ASTpostIncrDecrExpression jjtn003 = new ASTpostIncrDecrExpression(JJTPOSTINCRDECREXPRESSION);
						boolean jjtc003 = true;
						jjtree.openNodeScope(jjtn003);
						try {
							jj_consume_token(ARITOP_LP);
							jj_consume_token(ARITOP_LP);
						} finally {
							if (jjtc003) {
								jjtree.closeNodeScope(jjtn003, true);
							}
						}
						break;
					case PARQA:
						jj_consume_token(PARQA);
						expression();
						jj_consume_token(PARQC);
						assignmentOperator();
						assignmentExpression();
						break;
					default:
						jj_la1[93] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
				break;
			default:
				jj_la1[96] = jj_gen;
				if (jj_2_15(4)) {
					ASTassignmentStatement jjtn004 = new ASTassignmentStatement(JJTASSIGNMENTSTATEMENT);
					boolean jjtc004 = true;
					jjtree.openNodeScope(jjtn004);
					try {
						fieldAccess();
						assignmentOperator();
						assignmentExpression();
					} catch (Throwable jjte004) {
						if (jjtc004) {
							jjtree.clearNodeScope(jjtn004);
							jjtc004 = false;
						} else {
							jjtree.popNode();
						}
						if (jjte004 instanceof RuntimeException) {
							{if (true) throw (RuntimeException)jjte004;}
						}
						if (jjte004 instanceof ParseException) {
							{if (true) throw (ParseException)jjte004;}
						}
						{if (true) throw (Error)jjte004;}
					} finally {
						if (jjtc004) {
							jjtree.closeNodeScope(jjtn004, true);
						}
					}
				} else if (jj_2_16(4)) {
					ASTmethodInvocation jjtn005 = new ASTmethodInvocation(JJTMETHODINVOCATION);
					boolean jjtc005 = true;
					jjtree.openNodeScope(jjtn005);
					try {
						jj_consume_token(THIS);
						jj_consume_token(DOT);
						vn = identifierName();
						jj_consume_token(PARTA);
						switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
							case FALSE:
							case NEW:
							case NULL:
							case SUPER:
							case THIS:
							case TRUE:
							case NUM:
							case ID:
							case ARITOP_LP:
							case PARTA:
							case NOT:
							case LITERAL:
							case CHARVALUE:
								argumentList();
								break;
							default:
								jj_la1[94] = jj_gen;
								;
						}
						jj_consume_token(PARTC);
						methodInvocation1();
						jjtree.closeNodeScope(jjtn005, true);
						jjtc005 = false;
						jjtn005.value = vn;
					} catch (Throwable jjte005) {
						if (jjtc005) {
							jjtree.clearNodeScope(jjtn005);
							jjtc005 = false;
						} else {
							jjtree.popNode();
						}
						if (jjte005 instanceof RuntimeException) {
							{if (true) throw (RuntimeException)jjte005;}
						}
						if (jjte005 instanceof ParseException) {
							{if (true) throw (ParseException)jjte005;}
						}
						{if (true) throw (Error)jjte005;}
					} finally {
						if (jjtc005) {
							jjtree.closeNodeScope(jjtn005, true);
						}
					}
				} else {
					switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
						case SUPER:
							ASTmethodInvocation jjtn006 = new ASTmethodInvocation(JJTMETHODINVOCATION);
							boolean jjtc006 = true;
							jjtree.openNodeScope(jjtn006);
							try {
								jj_consume_token(SUPER);
								jj_consume_token(DOT);
								jj_consume_token(ID);
								jj_consume_token(PARTA);
								switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
									case FALSE:
									case NEW:
									case NULL:
									case SUPER:
									case THIS:
									case TRUE:
									case NUM:
									case ID:
									case ARITOP_LP:
									case PARTA:
									case NOT:
									case LITERAL:
									case CHARVALUE:
										argumentList();
										break;
									default:
										jj_la1[95] = jj_gen;
										;
								}
								jj_consume_token(PARTC);
								methodInvocation1();
							} catch (Throwable jjte006) {
								if (jjtc006) {
									jjtree.clearNodeScope(jjtn006);
									jjtc006 = false;
								} else {
									jjtree.popNode();
								}
								if (jjte006 instanceof RuntimeException) {
									{if (true) throw (RuntimeException)jjte006;}
								}
								if (jjte006 instanceof ParseException) {
									{if (true) throw (ParseException)jjte006;}
								}
								{if (true) throw (Error)jjte006;}
							} finally {
								if (jjtc006) {
									jjtree.closeNodeScope(jjtn006, true);
								}
							}
							break;
						case ARITOP_LP:
							preIncrDecrExpression();
							break;
						case NEW:
							classInstanceCreationExpression();
							break;
						default:
							jj_la1[97] = jj_gen;
							jj_consume_token(-1);
							throw new ParseException();
					}
				}
		}
	}

	static final public void methodInvocation() throws ParseException {
		/*@bgen(jjtree) methodInvocation */
		ASTmethodInvocation jjtn000 = new ASTmethodInvocation(JJTMETHODINVOCATION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);ValueNode vn = null;
		try {
			if (jj_2_17(2)) {
				vn = identifierName();
				jj_consume_token(PARTA);
				switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
					case FALSE:
					case NEW:
					case NULL:
					case SUPER:
					case THIS:
					case TRUE:
					case NUM:
					case ID:
					case ARITOP_LP:
					case PARTA:
					case NOT:
					case LITERAL:
					case CHARVALUE:
						argumentList();
						break;
					default:
						jj_la1[98] = jj_gen;
						;
				}
				jj_consume_token(PARTC);
				methodInvocation1();
			} else {
				switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
					case THIS:
						jj_consume_token(THIS);
						jj_consume_token(DOT);
						vn = identifierName();
						jj_consume_token(PARTA);
						switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
							case FALSE:
							case NEW:
							case NULL:
							case SUPER:
							case THIS:
							case TRUE:
							case NUM:
							case ID:
							case ARITOP_LP:
							case PARTA:
							case NOT:
							case LITERAL:
							case CHARVALUE:
								argumentList();
								break;
							default:
								jj_la1[99] = jj_gen;
								;
						}
						jj_consume_token(PARTC);
						methodInvocation1();
						break;
					case SUPER:
						jj_consume_token(SUPER);
						jj_consume_token(DOT);
						jj_consume_token(ID);
						jj_consume_token(PARTA);
						switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
							case FALSE:
							case NEW:
							case NULL:
							case SUPER:
							case THIS:
							case TRUE:
							case NUM:
							case ID:
							case ARITOP_LP:
							case PARTA:
							case NOT:
							case LITERAL:
							case CHARVALUE:
								argumentList();
								break;
							default:
								jj_la1[100] = jj_gen;
								;
						}
						jj_consume_token(PARTC);
						methodInvocation1();
						break;
					default:
						jj_la1[101] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
			}
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			jjtn000.value = vn;
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void methodInvocation1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case DOT:
				jj_consume_token(DOT);
				methodInvocation();
				break;
			default:
				jj_la1[102] = jj_gen;

		}
	}

	static final public void ifThenStatement() throws ParseException {
		/*@bgen(jjtree) ifThenStatement */
		ASTifThenStatement jjtn000 = new ASTifThenStatement(JJTIFTHENSTATEMENT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(IF);
			jj_consume_token(PARTA);
			expression();
			jj_consume_token(PARTC);
			ASTifBody jjtn001 = new ASTifBody(JJTIFBODY);
			boolean jjtc001 = true;
			jjtree.openNodeScope(jjtn001);
			try {
				statement();
			} catch (Throwable jjte001) {
				if (jjtc001) {
					jjtree.clearNodeScope(jjtn001);
					jjtc001 = false;
				} else {
					jjtree.popNode();
				}
				if (jjte001 instanceof RuntimeException) {
					{if (true) throw (RuntimeException)jjte001;}
				}
				if (jjte001 instanceof ParseException) {
					{if (true) throw (ParseException)jjte001;}
				}
				{if (true) throw (Error)jjte001;}
			} finally {
				if (jjtc001) {
					jjtree.closeNodeScope(jjtn001, true);
				}
			}
			elseStatement();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void elseStatement() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case ELSE:
				ASTelseStatement jjtn001 = new ASTelseStatement(JJTELSESTATEMENT);
				boolean jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				try {
					jj_consume_token(ELSE);
					statement();
				} catch (Throwable jjte001) {
					if (jjtc001) {
						jjtree.clearNodeScope(jjtn001);
						jjtc001 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte001 instanceof RuntimeException) {
						{if (true) throw (RuntimeException)jjte001;}
					}
					if (jjte001 instanceof ParseException) {
						{if (true) throw (ParseException)jjte001;}
					}
					{if (true) throw (Error)jjte001;}
				} finally {
					if (jjtc001) {
						jjtree.closeNodeScope(jjtn001, true);
					}
				}
				break;
			default:
				jj_la1[103] = jj_gen;

		}
	}

	static final public void ifThenElseStatementNoShortIf() throws ParseException {
		/*@bgen(jjtree) ifThenElseStatementNoShortIf */
		ASTifThenElseStatementNoShortIf jjtn000 = new ASTifThenElseStatementNoShortIf(JJTIFTHENELSESTATEMENTNOSHORTIF);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(IF);
			jj_consume_token(PARTA);
			expression();
			jj_consume_token(PARTC);
			statementNoShortIf();
			jj_consume_token(ELSE);
			statementNoShortIf();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void switchStatement() throws ParseException {
		/*@bgen(jjtree) switchStatement */
		ASTswitchStatement jjtn000 = new ASTswitchStatement(JJTSWITCHSTATEMENT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(SWITCH);
			jj_consume_token(PARTA);
			expression();
			jj_consume_token(PARTC);
			switchBlock();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void switchBlock() throws ParseException {
		jj_consume_token(PARGA);
		switchBlock1();
		jj_consume_token(PARGC);
	}

	static final public void switchBlock1() throws ParseException {
		if (jj_2_18(2)) {
			switchBlockStatementGroups();
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case CASE:
				case _DEFAULT:
					switchLabels();
					break;
				default:
					jj_la1[104] = jj_gen;
					;
			}
		} else {
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case CASE:
				case _DEFAULT:
					switchLabels();
					break;
				default:
					jj_la1[105] = jj_gen;

			}
		}
	}

	static final public void switchBlockStatementGroups() throws ParseException {
		switchBlockStatementGroup();
		switchBlockStatementGroups1();
	}

	static final public void switchBlockStatementGroups1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case CASE:
			case _DEFAULT:
				switchBlockStatementGroup();
				switchBlockStatementGroups1();
				break;
			default:
				jj_la1[106] = jj_gen;

		}
	}

	static final public void switchBlockStatementGroup() throws ParseException {
		/*@bgen(jjtree) switchBlockStatementGroup */
		ASTswitchBlockStatementGroup jjtn000 = new ASTswitchBlockStatementGroup(JJTSWITCHBLOCKSTATEMENTGROUP);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			switchLabels();
			blockStatements();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void switchLabels() throws ParseException {
		switchLabel();
		switchLabels1();
	}

	static final public void switchLabels1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case CASE:
			case _DEFAULT:
				switchLabel();
				switchLabels1();
				break;
			default:
				jj_la1[107] = jj_gen;

		}
	}

	static final public void switchLabel() throws ParseException {
		/*@bgen(jjtree) switchLabel */
		ASTswitchLabel jjtn000 = new ASTswitchLabel(JJTSWITCHLABEL);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case CASE:
					jj_consume_token(CASE);
					constantExpression();
					jj_consume_token(DPOINTS);
					break;
				case _DEFAULT:
					jj_consume_token(_DEFAULT);
					jj_consume_token(DPOINTS);
					break;
				default:
					jj_la1[108] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void whileStatement() throws ParseException {
		/*@bgen(jjtree) whileStatement */
		ASTwhileStatement jjtn000 = new ASTwhileStatement(JJTWHILESTATEMENT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(WHILE);
			jj_consume_token(PARTA);
			ASTwhileCondition jjtn001 = new ASTwhileCondition(JJTWHILECONDITION);
			boolean jjtc001 = true;
			jjtree.openNodeScope(jjtn001);
			try {
				expression();
			} catch (Throwable jjte001) {
				if (jjtc001) {
					jjtree.clearNodeScope(jjtn001);
					jjtc001 = false;
				} else {
					jjtree.popNode();
				}
				if (jjte001 instanceof RuntimeException) {
					{if (true) throw (RuntimeException)jjte001;}
				}
				if (jjte001 instanceof ParseException) {
					{if (true) throw (ParseException)jjte001;}
				}
				{if (true) throw (Error)jjte001;}
			} finally {
				if (jjtc001) {
					jjtree.closeNodeScope(jjtn001, true);
				}
			}
			jj_consume_token(PARTC);
			ASTwhileBody jjtn002 = new ASTwhileBody(JJTWHILEBODY);
			boolean jjtc002 = true;
			jjtree.openNodeScope(jjtn002);
			try {
				statement();
			} catch (Throwable jjte002) {
				if (jjtc002) {
					jjtree.clearNodeScope(jjtn002);
					jjtc002 = false;
				} else {
					jjtree.popNode();
				}
				if (jjte002 instanceof RuntimeException) {
					{if (true) throw (RuntimeException)jjte002;}
				}
				if (jjte002 instanceof ParseException) {
					{if (true) throw (ParseException)jjte002;}
				}
				{if (true) throw (Error)jjte002;}
			} finally {
				if (jjtc002) {
					jjtree.closeNodeScope(jjtn002, true);
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void whileStatementNoShortIf() throws ParseException {
		/*@bgen(jjtree) whileStatementNoShortIf */
		ASTwhileStatementNoShortIf jjtn000 = new ASTwhileStatementNoShortIf(JJTWHILESTATEMENTNOSHORTIF);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(WHILE);
			jj_consume_token(PARTA);
			expression();
			jj_consume_token(PARTC);
			statementNoShortIf();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void doStatement() throws ParseException {
		/*@bgen(jjtree) doStatement */
		ASTdoStatement jjtn000 = new ASTdoStatement(JJTDOSTATEMENT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(DO);
			statement();
			jj_consume_token(WHILE);
			jj_consume_token(PARTA);
			expression();
			jj_consume_token(PARTC);
			jj_consume_token(SEMIC);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void forStatement() throws ParseException {
		/*@bgen(jjtree) forStatement */
		ASTforStatement jjtn000 = new ASTforStatement(JJTFORSTATEMENT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(FOR);
			jj_consume_token(PARTA);
			forStatement1();
			jj_consume_token(PARTC);
			statement();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void forStatement1() throws ParseException {
		if (jj_2_19(3)) {
			forInit();
			jj_consume_token(SEMIC);
			expression();
			jj_consume_token(SEMIC);
			forUpdate();
		} else {
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
				case VOID:
				case ID:
					type();
					jj_consume_token(ID);
					jj_consume_token(DPOINTS);
					expression();
					break;
				default:
					jj_la1[109] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		}
	}

	static final public void forStatementNoShortIf() throws ParseException {
		/*@bgen(jjtree) forStatementNoShortIf */
		ASTforStatementNoShortIf jjtn000 = new ASTforStatementNoShortIf(JJTFORSTATEMENTNOSHORTIF);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(FOR);
			jj_consume_token(PARTA);
			forInit();
			jj_consume_token(SEMIC);
			expression();
			jj_consume_token(SEMIC);
			forUpdate();
			jj_consume_token(PARTC);
			statementNoShortIf();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void forInit() throws ParseException {
		/*@bgen(jjtree) forInit */
		ASTforInit jjtn000 = new ASTforInit(JJTFORINIT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			if (jj_2_20(3)) {
				statementExpressionList();
			} else {
				switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
					case BOOLEAN:
					case BYTE:
					case CHAR:
					case DOUBLE:
					case FLOAT:
					case INT:
					case LONG:
					case SHORT:
					case VOID:
					case ID:
						localVariableDeclaration();
						break;
					default:
						jj_la1[110] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void forUpdate() throws ParseException {
		/*@bgen(jjtree) forUpdate */
		ASTforUpdate jjtn000 = new ASTforUpdate(JJTFORUPDATE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			statementExpressionList();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void statementExpressionList() throws ParseException {
		statementExpression();
		statementExpressionList1();
	}

	static final public void statementExpressionList1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case COMMA:
				jj_consume_token(COMMA);
				statementExpression();
				statementExpressionList1();
				break;
			default:
				jj_la1[111] = jj_gen;

		}
	}

	static final public void breakStatement() throws ParseException {
		/*@bgen(jjtree) breakStatement */
		ASTbreakStatement jjtn000 = new ASTbreakStatement(JJTBREAKSTATEMENT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(BREAK);
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case ID:
					jj_consume_token(ID);
					break;
				default:
					jj_la1[112] = jj_gen;
					;
			}
			jj_consume_token(SEMIC);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void continueStatement() throws ParseException {
		/*@bgen(jjtree) continueStatement */
		ASTcontinueStatement jjtn000 = new ASTcontinueStatement(JJTCONTINUESTATEMENT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(CONTINUE);
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case ID:
					jj_consume_token(ID);
					break;
				default:
					jj_la1[113] = jj_gen;
					;
			}
			jj_consume_token(SEMIC);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void returnStatement() throws ParseException {
		/*@bgen(jjtree) returnStatement */
		ASTreturnStatement jjtn000 = new ASTreturnStatement(JJTRETURNSTATEMENT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(RETURN);
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case FALSE:
				case NEW:
				case NULL:
				case SUPER:
				case THIS:
				case TRUE:
				case NUM:
				case ID:
				case ARITOP_LP:
				case PARTA:
				case NOT:
				case LITERAL:
				case CHARVALUE:
					expression();
					break;
				default:
					jj_la1[114] = jj_gen;
					;
			}
			jj_consume_token(SEMIC);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void throwsStatement() throws ParseException {
		/*@bgen(jjtree) throwsStatement */
		ASTthrowsStatement jjtn000 = new ASTthrowsStatement(JJTTHROWSSTATEMENT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(THROW);
			expression();
			jj_consume_token(SEMIC);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void synchronizedStatement() throws ParseException {
		/*@bgen(jjtree) synchronizedStatement */
		ASTsynchronizedStatement jjtn000 = new ASTsynchronizedStatement(JJTSYNCHRONIZEDSTATEMENT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(SYNCHRONIZED);
			jj_consume_token(PARTA);
			expression();
			jj_consume_token(PARTC);
			block();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void tryStatement() throws ParseException {
		/*@bgen(jjtree) tryStatement */
		ASTtryStatement jjtn000 = new ASTtryStatement(JJTTRYSTATEMENT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(TRY);
			ASTtryBody jjtn001 = new ASTtryBody(JJTTRYBODY);
			boolean jjtc001 = true;
			jjtree.openNodeScope(jjtn001);
			try {
				block();
			} catch (Throwable jjte001) {
				if (jjtc001) {
					jjtree.clearNodeScope(jjtn001);
					jjtc001 = false;
				} else {
					jjtree.popNode();
				}
				if (jjte001 instanceof RuntimeException) {
					{if (true) throw (RuntimeException)jjte001;}
				}
				if (jjte001 instanceof ParseException) {
					{if (true) throw (ParseException)jjte001;}
				}
				{if (true) throw (Error)jjte001;}
			} finally {
				if (jjtc001) {
					jjtree.closeNodeScope(jjtn001, true);
				}
			}
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case CATCH:
					catches();
					break;
				default:
					jj_la1[115] = jj_gen;
					;
			}
			switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
				case FINALLY:
					finallys();
					break;
				default:
					jj_la1[116] = jj_gen;
					;
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void catches() throws ParseException {
		/*@bgen(jjtree) catches */
		ASTcatches jjtn000 = new ASTcatches(JJTCATCHES);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			catchClause();
			catches1();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void catches1() throws ParseException {
		switch (/*(jj_ntk==-1)?jj_ntk():jj_ntk*/true) {
			case CATCH:
				catchClause();
				catches1();
				break;
			default:
				jj_la1[117] = jj_gen;

		}
	}

	static final public void catchClause() throws ParseException {
		jj_consume_token(CATCH);
		jj_consume_token(PARTA);
		formalParameter();
		jj_consume_token(PARTC);
		ASTcatcheBody jjtn001 = new ASTcatcheBody(JJTCATCHEBODY);
		boolean jjtc001 = true;
		jjtree.openNodeScope(jjtn001);
		try {
			block();
		} catch (Throwable jjte001) {
			if (jjtc001) {
				jjtree.clearNodeScope(jjtn001);
				jjtc001 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte001 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte001;}
			}
			if (jjte001 instanceof ParseException) {
				{if (true) throw (ParseException)jjte001;}
			}
			{if (true) throw (Error)jjte001;}
		} finally {
			if (jjtc001) {
				jjtree.closeNodeScope(jjtn001, true);
			}
		}
	}

	static final public void finallys() throws ParseException {
		/*@bgen(jjtree) finallys */
		ASTfinallys jjtn000 = new ASTfinallys(JJTFINALLYS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(FINALLY);
			block();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void constantExpression() throws ParseException {
		/*@bgen(jjtree) constantExpression */
		ASTconstantExpression jjtn000 = new ASTconstantExpression(JJTCONSTANTEXPRESSION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			expression();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException)jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException)jjte000;}
			}
			{if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static void error_skip(int kind) throws ParseException, ParseException {
		/*@bgen(jjtree) error_skip */
		ASTerror_skip jjtn000 = new ASTerror_skip(JJTERROR_SKIP);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {ParseException e = generateParseException();
			System.err.println(e.toString());
			Token t;
			do
			{
				t = getNextToken();
				if (t.kind == 0)
					throw new ParseException("achieved EOF! No sync tokens found.");
			}
			while (t.kind != kind);/*@bgen(jjtree)*/
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof ParseException) {
				throw (ParseException)jjte000;
			}
			throw (Error)jjte000;
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static void install(Token t, boolean isClassMember) throws ParseException {
		SymbolTableEntry stE = new SymbolTableEntry(null, t, isClassMember);
		try {
			st.install(stE);
		} catch(Exception e) {
			System.err.println(e.getMessage());
		}
	}

	static private boolean jj_2_1(int xla) {
		jj_la = xla; //jj_lastpos = jj_scanpos = token;
		try { return !jj_3_1(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(0, xla); }
	}

	static private boolean jj_2_2(int xla) {
		jj_la = xla; //jj_lastpos = jj_scanpos = token;
		try { return !jj_3_2(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(1, xla); }
	}

	static private boolean jj_2_3(int xla) {
		jj_la = xla; //jj_lastpos = jj_scanpos = token;
		try { return !jj_3_3(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(2, xla); }
	}

	static private boolean jj_2_4(int xla) {
		jj_la = xla; //jj_lastpos = jj_scanpos = token;
		try { return !jj_3_4(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(3, xla); }
	}

	static private boolean jj_2_5(int xla) {
		jj_la = xla; //jj_lastpos = jj_scanpos = token;
		try { return !jj_3_5(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(4, xla); }
	}

	static private boolean jj_2_6(int xla) {
		jj_la = xla; //jj_lastpos = jj_scanpos = token;
		try { return !jj_3_6(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(5, xla); }
	}

	static private boolean jj_2_7(int xla) {
		jj_la = xla; //jj_lastpos = jj_scanpos = token;
		try { return !jj_3_7(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(6, xla); }
	}

	static private boolean jj_2_8(int xla) {
		jj_la = xla; //jj_lastpos = jj_scanpos = token;
		try { return !jj_3_8(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(7, xla); }
	}

	static private boolean jj_2_9(int xla) {
		jj_la = xla; //jj_lastpos = jj_scanpos = token;
		try { return !jj_3_9(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(8, xla); }
	}

	static private boolean jj_2_10(int xla) {
		jj_la = xla; //jj_lastpos = jj_scanpos = token;
		try { return !jj_3_10(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(9, xla); }
	}

	static private boolean jj_2_11(int xla) {
		jj_la = xla; //jj_lastpos = jj_scanpos = token;
		try { return !jj_3_11(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(10, xla); }
	}

	static private boolean jj_2_12(int xla) {
		jj_la = xla; //jj_lastpos = jj_scanpos = token;
		try { return !jj_3_12(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(11, xla); }
	}

	static private boolean jj_2_13(int xla) {
		jj_la = xla; //jj_lastpos = jj_scanpos = token;
		try { return !jj_3_13(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(12, xla); }
	}

	static private boolean jj_2_14(int xla) {
		jj_la = xla; //jj_lastpos = jj_scanpos = token;
		try { return !jj_3_14(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(13, xla); }
	}

	static private boolean jj_2_15(int xla) {
		jj_la = xla; //jj_lastpos = jj_scanpos = token;
		try { return !jj_3_15(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(14, xla); }
	}

	static private boolean jj_2_16(int xla) {
		jj_la = xla; //jj_lastpos = jj_scanpos = token;
		try { return !jj_3_16(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(15, xla); }
	}

	static private boolean jj_2_17(int xla) {
		jj_la = xla; //jj_lastpos = jj_scanpos = token;
		try { return !jj_3_17(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(16, xla); }
	}

	static private boolean jj_2_18(int xla) {
		jj_la = xla; //jj_lastpos = jj_scanpos = token;
		try { return !jj_3_18(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(17, xla); }
	}

	static private boolean jj_2_19(int xla) {
		jj_la = xla; //jj_lastpos = jj_scanpos = token;
		try { return !jj_3_19(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(18, xla); }
	}

	static private boolean jj_2_20(int xla) {
		jj_la = xla; //jj_lastpos = jj_scanpos = token;
		try { return !jj_3_20(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(19, xla); }
	}

	static private boolean jj_3_18() {
		if (jj_3R_19()) return true;
		return false;
	}

	static private boolean jj_3R_104() {
		if (jj_3R_130()) return true;
		return false;
	}

	static private boolean jj_3R_113() {
		return false;
	}

	static private boolean jj_3_2() {
		if (jj_3R_7()) return true;
		if (jj_scan_token(SEMIC)) return true;
		return false;
	}

	static private boolean jj_3R_67() {
		return false;
	}

	static private boolean jj_3R_24() {
		if (jj_3R_57()) return true;
		return false;
	}

	static private boolean jj_3R_77() {
		if (jj_scan_token(SWITCH)) return true;
		if (jj_scan_token(PARTA)) return true;
		return false;
	}

	static private boolean jj_3R_144() {
		if (jj_3R_104()) return true;
		return false;
	}

	static private boolean jj_3R_32() {
		if (jj_3R_14()) return true;
		if (jj_3R_9()) return true;
		return false;
	}

	static private boolean jj_3R_23() {
		if (jj_3R_56()) return true;
		return false;
	}

	static private boolean jj_3R_65() {
		if (jj_3R_97()) return true;
		return false;
	}

	static private boolean jj_3R_11() {
		if (jj_3R_32()) return true;
		if (jj_scan_token(SEMIC)) return true;
		return false;
	}

	static private boolean jj_3_7() {
		if (jj_3R_11()) return true;
		return false;
	}

	static private boolean jj_3R_138() {
		if (jj_scan_token(IF)) return true;
		if (jj_scan_token(PARTA)) return true;
		return false;
	}

	static private boolean jj_3R_30() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_7()) {
			jj_scanpos = xsp;
			if (jj_3R_65()) return true;
		}
		return false;
	}

	static private boolean jj_3R_57() {
		if (jj_scan_token(IMPLEMENTS)) return true;
		return false;
	}

	static private boolean jj_3R_31() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_66()) {
			jj_scanpos = xsp;
			if (jj_3R_67()) return true;
		}
		return false;
	}

	static private boolean jj_3R_66() {
		if (jj_3R_30()) return true;
		return false;
	}

	static private boolean jj_3_17() {
		if (jj_3R_18()) return true;
		if (jj_scan_token(PARTA)) return true;
		return false;
	}

	static private boolean jj_3R_133() {
		if (jj_3R_144()) return true;
		return false;
	}

	static private boolean jj_3R_91() {
		if (jj_3R_111()) return true;
		return false;
	}

	static private boolean jj_3_6() {
		if (jj_scan_token(THIS)) return true;
		if (jj_scan_token(PARTA)) return true;
		return false;
	}

	static private boolean jj_3R_90() {
		if (jj_3R_110()) return true;
		return false;
	}

	static private boolean jj_3R_92() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(50)) {
			jj_scanpos = xsp;
			if (jj_scan_token(14)) {
				jj_scanpos = xsp;
				if (jj_scan_token(32)) return true;
			}
		}
		return false;
	}

	static private boolean jj_3R_10() {
		if (jj_3R_30()) return true;
		if (jj_3R_31()) return true;
		return false;
	}

	static private boolean jj_3R_108() {
		if (jj_scan_token(ARITOP_LP)) return true;
		if (jj_scan_token(ARITOP_LP)) return true;
		return false;
	}

	static private boolean jj_3R_109() {
		if (jj_scan_token(PARQA)) return true;
		if (jj_3R_104()) return true;
		return false;
	}

	static private boolean jj_3_5() {
		if (jj_3R_10()) return true;
		return false;
	}

	static private boolean jj_3R_89() {
		if (jj_scan_token(SUPER)) return true;
		if (jj_scan_token(DOT)) return true;
		if (jj_scan_token(ID)) return true;
		return false;
	}

	static private boolean jj_3R_107() {
		if (jj_scan_token(PARTA)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_133()) jj_scanpos = xsp;
		if (jj_scan_token(PARTC)) return true;
		return false;
	}

	static private boolean jj_3R_93() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_112()) {
			jj_scanpos = xsp;
			if (jj_3R_113()) return true;
		}
		return false;
	}

	static private boolean jj_3R_112() {
		if (jj_3R_92()) return true;
		if (jj_3R_93()) return true;
		return false;
	}

	static private boolean jj_3_15() {
		if (jj_3R_16()) return true;
		if (jj_3R_17()) return true;
		return false;
	}

	static private boolean jj_3R_106() {
		if (jj_3R_17()) return true;
		if (jj_3R_130()) return true;
		return false;
	}

	static private boolean jj_3R_73() {
		return false;
	}

	static private boolean jj_3_16() {
		if (jj_scan_token(THIS)) return true;
		if (jj_scan_token(DOT)) return true;
		if (jj_3R_18()) return true;
		if (jj_scan_token(PARTA)) return true;
		return false;
	}

	static private boolean jj_3R_115() {
		return false;
	}

	static private boolean jj_3R_55() {
		if (jj_3R_92()) return true;
		if (jj_3R_93()) return true;
		return false;
	}

	static private boolean jj_3R_36() {
		if (jj_3R_71()) return true;
		return false;
	}

	static private boolean jj_3R_54() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_88()) {
			jj_scanpos = xsp;
			if (jj_3_15()) {
				jj_scanpos = xsp;
				if (jj_3_16()) {
					jj_scanpos = xsp;
					if (jj_3R_89()) {
						jj_scanpos = xsp;
						if (jj_3R_90()) {
							jj_scanpos = xsp;
							if (jj_3R_91()) return true;
						}
					}
				}
			}
		}
		return false;
	}

	static private boolean jj_3R_88() {
		if (jj_3R_18()) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_106()) {
			jj_scanpos = xsp;
			if (jj_3R_107()) {
				jj_scanpos = xsp;
				if (jj_3R_108()) {
					jj_scanpos = xsp;
					if (jj_3R_109()) return true;
				}
			}
		}
		return false;
	}

	static private boolean jj_3R_22() {
		if (jj_3R_55()) return true;
		return false;
	}

	static private boolean jj_3R_6() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_22()) jj_scanpos = xsp;
		if (jj_scan_token(CLASS)) return true;
		if (jj_scan_token(ID)) return true;
		xsp = jj_scanpos;
		if (jj_3R_23()) jj_scanpos = xsp;
		xsp = jj_scanpos;
		if (jj_3R_24()) jj_scanpos = xsp;
		if (jj_3R_25()) return true;
		return false;
	}

	static private boolean jj_3R_76() {
		if (jj_3R_54()) return true;
		return false;
	}

	static private boolean jj_3_1() {
		if (jj_3R_6()) return true;
		return false;
	}

	static private boolean jj_3R_35() {
		if (jj_3R_70()) return true;
		return false;
	}

	static private boolean jj_3R_137() {
		if (jj_scan_token(ID)) return true;
		if (jj_scan_token(DPOINTS)) return true;
		return false;
	}

	static private boolean jj_3R_37() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_72()) {
			jj_scanpos = xsp;
			if (jj_3R_73()) return true;
		}
		return false;
	}

	static private boolean jj_3R_70() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(18)) {
			jj_scanpos = xsp;
			if (jj_scan_token(52)) {
				jj_scanpos = xsp;
				if (jj_scan_token(41)) {
					jj_scanpos = xsp;
					if (jj_scan_token(43)) {
						jj_scanpos = xsp;
						if (jj_scan_token(21)) {
							jj_scanpos = xsp;
							if (jj_scan_token(16)) {
								jj_scanpos = xsp;
								if (jj_scan_token(34)) {
									jj_scanpos = xsp;
									if (jj_scan_token(27)) return true;
								}
							}
						}
					}
				}
			}
		}
		return false;
	}

	static private boolean jj_3R_72() {
		if (jj_scan_token(PARQA)) return true;
		if (jj_scan_token(PARQC)) return true;
		return false;
	}

	static private boolean jj_3R_75() {
		if (jj_scan_token(SEMIC)) return true;
		return false;
	}

	static private boolean jj_3R_14() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(64)) {
			jj_scanpos = xsp;
			if (jj_3R_35()) {
				jj_scanpos = xsp;
				if (jj_3R_36()) return true;
			}
		}
		if (jj_3R_37()) return true;
		return false;
	}

	static private boolean jj_3R_48() {
		if (jj_3R_84()) return true;
		return false;
	}

	static private boolean jj_3R_47() {
		if (jj_3R_83()) return true;
		return false;
	}

	static private boolean jj_3R_46() {
		if (jj_3R_82()) return true;
		return false;
	}

	static private boolean jj_3R_45() {
		if (jj_3R_81()) return true;
		return false;
	}

	static private boolean jj_3R_44() {
		if (jj_3R_80()) return true;
		return false;
	}

	static private boolean jj_3R_43() {
		if (jj_3R_79()) return true;
		return false;
	}

	static private boolean jj_3R_94() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_114()) {
			jj_scanpos = xsp;
			if (jj_3R_115()) return true;
		}
		return false;
	}

	static private boolean jj_3R_114() {
		if (jj_scan_token(PARQA)) return true;
		return false;
	}

	static private boolean jj_3R_42() {
		if (jj_3R_78()) return true;
		return false;
	}

	static private boolean jj_3R_41() {
		if (jj_3R_77()) return true;
		return false;
	}

	static private boolean jj_3R_40() {
		if (jj_3R_76()) return true;
		return false;
	}

	static private boolean jj_3R_39() {
		if (jj_3R_75()) return true;
		return false;
	}

	static private boolean jj_3R_38() {
		if (jj_3R_74()) return true;
		return false;
	}

	static private boolean jj_3R_102() {
		if (jj_3R_10()) return true;
		return false;
	}

	static private boolean jj_3R_95() {
		if (jj_scan_token(MINOR)) return true;
		if (jj_scan_token(ID)) return true;
		return false;
	}

	static private boolean jj_3R_15() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_38()) {
			jj_scanpos = xsp;
			if (jj_3R_39()) {
				jj_scanpos = xsp;
				if (jj_3R_40()) {
					jj_scanpos = xsp;
					if (jj_3R_41()) {
						jj_scanpos = xsp;
						if (jj_3R_42()) {
							jj_scanpos = xsp;
							if (jj_3R_43()) {
								jj_scanpos = xsp;
								if (jj_3R_44()) {
									jj_scanpos = xsp;
									if (jj_3R_45()) {
										jj_scanpos = xsp;
										if (jj_3R_46()) {
											jj_scanpos = xsp;
											if (jj_3R_47()) {
												jj_scanpos = xsp;
												if (jj_3R_48()) return true;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return false;
	}

	static private boolean jj_3R_74() {
		if (jj_scan_token(PARGA)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_102()) jj_scanpos = xsp;
		if (jj_scan_token(PARGC)) return true;
		return false;
	}

	static private boolean jj_3R_59() {
		if (jj_3R_95()) return true;
		return false;
	}

	static private boolean jj_3R_58() {
		if (jj_scan_token(ID)) return true;
		if (jj_3R_94()) return true;
		return false;
	}

	static private boolean jj_3_14() {
		if (jj_3R_15()) return true;
		return false;
	}

	static private boolean jj_3R_26() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_58()) {
			jj_scanpos = xsp;
			if (jj_3R_59()) return true;
		}
		return false;
	}

	static private boolean jj_3R_64() {
		return false;
	}

	static private boolean jj_3R_119() {
		if (jj_3R_140()) return true;
		return false;
	}

	static private boolean jj_3R_118() {
		if (jj_3R_139()) return true;
		return false;
	}

	static private boolean jj_3R_117() {
		if (jj_3R_138()) return true;
		return false;
	}

	static private boolean jj_3R_116() {
		if (jj_3R_137()) return true;
		return false;
	}

	static private boolean jj_3_13() {
		if (jj_3R_15()) return true;
		return false;
	}

	static private boolean jj_3R_97() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_13()) {
			jj_scanpos = xsp;
			if (jj_3R_116()) {
				jj_scanpos = xsp;
				if (jj_3R_117()) {
					jj_scanpos = xsp;
					if (jj_3R_118()) {
						jj_scanpos = xsp;
						if (jj_3R_119()) return true;
					}
				}
			}
		}
		return false;
	}

	static private boolean jj_3R_148() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(62)) {
			jj_scanpos = xsp;
			if (jj_scan_token(31)) return true;
		}
		return false;
	}

	static private boolean jj_3R_141() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_148()) {
			jj_scanpos = xsp;
			if (jj_scan_token(109)) {
				jj_scanpos = xsp;
				if (jj_scan_token(108)) {
					jj_scanpos = xsp;
					if (jj_scan_token(81)) {
						jj_scanpos = xsp;
						if (jj_scan_token(46)) return true;
					}
				}
			}
		}
		return false;
	}

	static private boolean jj_3R_160() {
		if (jj_scan_token(PARQA)) return true;
		return false;
	}

	static private boolean jj_3R_135() {
		if (jj_3R_70()) return true;
		return false;
	}

	static private boolean jj_3R_159() {
		if (jj_3R_160()) return true;
		return false;
	}

	static private boolean jj_3R_155() {
		if (jj_3R_159()) return true;
		return false;
	}

	static private boolean jj_3R_154() {
		if (jj_scan_token(MINOR)) return true;
		return false;
	}

	static private boolean jj_3R_153() {
		if (jj_scan_token(PARTA)) return true;
		return false;
	}

	static private boolean jj_3R_150() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_153()) {
			jj_scanpos = xsp;
			if (jj_3R_154()) {
				jj_scanpos = xsp;
				if (jj_3R_155()) return true;
			}
		}
		return false;
	}

	static private boolean jj_3R_147() {
		if (jj_3R_70()) return true;
		return false;
	}

	static private boolean jj_3R_134() {
		if (jj_3R_145()) return true;
		return false;
	}

	static private boolean jj_3R_146() {
		if (jj_3R_150()) return true;
		return false;
	}

	static private boolean jj_3R_136() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_146()) {
			jj_scanpos = xsp;
			if (jj_3R_147()) return true;
		}
		return false;
	}

	static private boolean jj_3R_61() {
		return false;
	}

	static private boolean jj_3R_27() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_60()) {
			jj_scanpos = xsp;
			if (jj_3R_61()) return true;
		}
		return false;
	}

	static private boolean jj_3R_60() {
		if (jj_scan_token(ASS)) return true;
		return false;
	}

	static private boolean jj_3R_111() {
		if (jj_scan_token(NEW)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_134()) {
			jj_scanpos = xsp;
			if (jj_3R_135()) return true;
		}
		if (jj_3R_136()) return true;
		return false;
	}

	static private boolean jj_3R_86() {
		return false;
	}

	static private boolean jj_3R_143() {
		if (jj_3R_104()) return true;
		return false;
	}

	static private boolean jj_3R_51() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_85()) {
			jj_scanpos = xsp;
			if (jj_3R_86()) return true;
		}
		return false;
	}

	static private boolean jj_3R_85() {
		if (jj_scan_token(DOT)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(82)) {
			jj_scanpos = xsp;
			if (jj_scan_token(22)) return true;
		}
		return false;
	}

	static private boolean jj_3R_7() {
		if (jj_3R_26()) return true;
		if (jj_3R_27()) return true;
		return false;
	}

	static private boolean jj_3R_29() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_63()) {
			jj_scanpos = xsp;
			if (jj_3R_64()) return true;
		}
		return false;
	}

	static private boolean jj_3R_63() {
		if (jj_scan_token(COMMA)) return true;
		return false;
	}

	static private boolean jj_3R_9() {
		if (jj_3R_7()) return true;
		if (jj_3R_29()) return true;
		return false;
	}

	static private boolean jj_3R_18() {
		if (jj_scan_token(ID)) return true;
		if (jj_3R_51()) return true;
		return false;
	}

	static private boolean jj_3R_110() {
		if (jj_scan_token(ARITOP_LP)) return true;
		if (jj_scan_token(ARITOP_LP)) return true;
		if (jj_3R_100()) return true;
		return false;
	}

	static private boolean jj_3R_84() {
		if (jj_scan_token(TRY)) return true;
		if (jj_3R_74()) return true;
		return false;
	}

	static private boolean jj_3R_166() {
		if (jj_3R_104()) return true;
		if (jj_scan_token(PARTC)) return true;
		return false;
	}

	static private boolean jj_3R_162() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_12()) {
			jj_scanpos = xsp;
			if (jj_3R_166()) return true;
		}
		return false;
	}

	static private boolean jj_3_12() {
		if (jj_3R_14()) return true;
		if (jj_scan_token(PARTC)) return true;
		return false;
	}

	static private boolean jj_3R_167() {
		if (jj_3R_144()) return true;
		return false;
	}

	static private boolean jj_3R_165() {
		return false;
	}

	static private boolean jj_3R_82() {
		if (jj_scan_token(SYNCHRONIZED)) return true;
		if (jj_scan_token(PARTA)) return true;
		return false;
	}

	static private boolean jj_3R_103() {
		if (jj_3R_104()) return true;
		return false;
	}

	static private boolean jj_3R_164() {
		if (jj_scan_token(PARQA)) return true;
		if (jj_3R_104()) return true;
		return false;
	}

	static private boolean jj_3R_156() {
		if (jj_scan_token(ARITOP_HP)) return true;
		if (jj_3R_100()) return true;
		return false;
	}

	static private boolean jj_3_11() {
		if (jj_scan_token(ARITOP_LP)) return true;
		if (jj_scan_token(ARITOP_LP)) return true;
		return false;
	}

	static private boolean jj_3R_83() {
		if (jj_scan_token(THROW)) return true;
		if (jj_3R_104()) return true;
		return false;
	}

	static private boolean jj_3R_62() {
		if (jj_3R_96()) return true;
		return false;
	}

	static private boolean jj_3R_151() {
		if (jj_scan_token(ARITOP_LP)) return true;
		if (jj_3R_69()) return true;
		return false;
	}

	static private boolean jj_3R_127() {
		if (jj_scan_token(PARTA)) return true;
		if (jj_3R_162()) return true;
		return false;
	}

	static private boolean jj_3R_163() {
		if (jj_scan_token(PARTA)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_167()) jj_scanpos = xsp;
		if (jj_scan_token(PARTC)) return true;
		return false;
	}

	static private boolean jj_3R_161() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_163()) {
			jj_scanpos = xsp;
			if (jj_3_11()) {
				jj_scanpos = xsp;
				if (jj_3R_164()) {
					jj_scanpos = xsp;
					if (jj_3R_165()) return true;
				}
			}
		}
		return false;
	}

	static private boolean jj_3R_28() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_4()) {
			jj_scanpos = xsp;
			if (jj_3R_62()) return true;
		}
		return false;
	}

	static private boolean jj_3_4() {
		if (jj_3R_9()) return true;
		if (jj_scan_token(SEMIC)) return true;
		return false;
	}

	static private boolean jj_3_10() {
		if (jj_scan_token(THIS)) return true;
		if (jj_scan_token(DOT)) return true;
		if (jj_3R_100()) return true;
		return false;
	}

	static private boolean jj_3R_126() {
		if (jj_scan_token(NOT)) return true;
		if (jj_3R_100()) return true;
		return false;
	}

	static private boolean jj_3R_81() {
		if (jj_scan_token(RETURN)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_103()) jj_scanpos = xsp;
		if (jj_scan_token(SEMIC)) return true;
		return false;
	}

	static private boolean jj_3R_125() {
		if (jj_scan_token(ARITOP_LP)) return true;
		if (jj_3R_100()) return true;
		return false;
	}

	static private boolean jj_3R_124() {
		if (jj_3R_141()) return true;
		return false;
	}

	static private boolean jj_3R_123() {
		if (jj_3R_111()) return true;
		return false;
	}

	static private boolean jj_3R_8() {
		if (jj_3R_14()) return true;
		if (jj_3R_28()) return true;
		return false;
	}

	static private boolean jj_3R_80() {
		if (jj_scan_token(CONTINUE)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(82)) jj_scanpos = xsp;
		if (jj_scan_token(SEMIC)) return true;
		return false;
	}

	static private boolean jj_3R_100() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_122()) {
			jj_scanpos = xsp;
			if (jj_3R_123()) {
				jj_scanpos = xsp;
				if (jj_3R_124()) {
					jj_scanpos = xsp;
					if (jj_3R_125()) {
						jj_scanpos = xsp;
						if (jj_3R_126()) {
							jj_scanpos = xsp;
							if (jj_3_10()) {
								jj_scanpos = xsp;
								if (jj_scan_token(58)) {
									jj_scanpos = xsp;
									if (jj_3R_127()) return true;
								}
							}
						}
					}
				}
			}
		}
		return false;
	}

	static private boolean jj_3R_122() {
		if (jj_3R_18()) return true;
		if (jj_3R_161()) return true;
		return false;
	}

	static private boolean jj_3R_79() {
		if (jj_scan_token(BREAK)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(82)) jj_scanpos = xsp;
		if (jj_scan_token(SEMIC)) return true;
		return false;
	}

	static private boolean jj_3_3() {
		if (jj_3R_8()) return true;
		return false;
	}

	static private boolean jj_3R_69() {
		if (jj_3R_100()) return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_156()) { jj_scanpos = xsp; break; }
		}
		return false;
	}

	static private boolean jj_3R_21() {
		if (jj_3R_54()) return true;
		return false;
	}

	static private boolean jj_3_9() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(107)) {
			jj_scanpos = xsp;
			if (jj_scan_token(105)) {
				jj_scanpos = xsp;
				if (jj_scan_token(106)) {
					jj_scanpos = xsp;
					if (jj_scan_token(40)) return true;
				}
			}
		}
		if (jj_3R_13()) return true;
		return false;
	}

	static private boolean jj_3R_121() {
		if (jj_scan_token(OR)) return true;
		if (jj_3R_120()) return true;
		return false;
	}

	static private boolean jj_3R_34() {
		if (jj_3R_69()) return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_151()) { jj_scanpos = xsp; break; }
		}
		return false;
	}

	static private boolean jj_3R_99() {
		if (jj_scan_token(AND)) return true;
		if (jj_3R_98()) return true;
		return false;
	}

	static private boolean jj_3R_53() {
		if (jj_3R_32()) return true;
		return false;
	}

	static private boolean jj_3_20() {
		if (jj_3R_21()) return true;
		return false;
	}

	static private boolean jj_3R_20() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_20()) {
			jj_scanpos = xsp;
			if (jj_3R_53()) return true;
		}
		return false;
	}

	static private boolean jj_3R_13() {
		if (jj_3R_34()) return true;
		return false;
	}

	static private boolean jj_3R_120() {
		if (jj_3R_13()) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_9()) jj_scanpos = xsp;
		return false;
	}

	static private boolean jj_3R_25() {
		if (jj_scan_token(PARGA)) return true;
		return false;
	}

	static private boolean jj_3R_68() {
		if (jj_3R_98()) return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_99()) { jj_scanpos = xsp; break; }
		}
		return false;
	}

	static private boolean jj_3R_98() {
		if (jj_3R_120()) return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_121()) { jj_scanpos = xsp; break; }
		}
		return false;
	}

	static private boolean jj_3R_129() {
		return false;
	}

	static private boolean jj_3R_128() {
		if (jj_scan_token(MINOR)) return true;
		if (jj_scan_token(ID)) return true;
		return false;
	}

	static private boolean jj_3R_101() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_128()) {
			jj_scanpos = xsp;
			if (jj_3R_129()) return true;
		}
		return false;
	}

	static private boolean jj_3_19() {
		if (jj_3R_20()) return true;
		if (jj_scan_token(SEMIC)) return true;
		return false;
	}

	static private boolean jj_3R_145() {
		if (jj_scan_token(ID)) return true;
		if (jj_3R_101()) return true;
		return false;
	}

	static private boolean jj_3R_140() {
		if (jj_scan_token(FOR)) return true;
		if (jj_scan_token(PARTA)) return true;
		return false;
	}

	static private boolean jj_3R_33() {
		if (jj_3R_68()) return true;
		return false;
	}

	static private boolean jj_3R_12() {
		if (jj_3R_33()) return true;
		return false;
	}

	static private boolean jj_3R_71() {
		if (jj_scan_token(ID)) return true;
		if (jj_3R_101()) return true;
		return false;
	}

	static private boolean jj_3R_78() {
		if (jj_scan_token(DO)) return true;
		if (jj_3R_97()) return true;
		return false;
	}

	static private boolean jj_3R_132() {
		if (jj_scan_token(_DEFAULT)) return true;
		if (jj_scan_token(DPOINTS)) return true;
		return false;
	}

	static private boolean jj_3R_139() {
		if (jj_scan_token(WHILE)) return true;
		if (jj_scan_token(PARTA)) return true;
		return false;
	}

	static private boolean jj_3R_56() {
		if (jj_scan_token(EXTENDS)) return true;
		return false;
	}

	static private boolean jj_3R_131() {
		if (jj_scan_token(CASE)) return true;
		if (jj_3R_143()) return true;
		return false;
	}

	static private boolean jj_3R_105() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_131()) {
			jj_scanpos = xsp;
			if (jj_3R_132()) return true;
		}
		return false;
	}

	static private boolean jj_3R_50() {
		if (jj_scan_token(SUPER)) return true;
		if (jj_scan_token(DOT)) return true;
		if (jj_scan_token(ID)) return true;
		return false;
	}

	static private boolean jj_3R_17() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(98)) {
			jj_scanpos = xsp;
			if (jj_scan_token(99)) {
				jj_scanpos = xsp;
				if (jj_scan_token(100)) {
					jj_scanpos = xsp;
					if (jj_scan_token(101)) {
						jj_scanpos = xsp;
						if (jj_scan_token(97)) return true;
					}
				}
			}
		}
		return false;
	}

	static private boolean jj_3R_49() {
		if (jj_scan_token(THIS)) return true;
		if (jj_scan_token(DOT)) return true;
		if (jj_scan_token(ID)) return true;
		return false;
	}

	static private boolean jj_3R_16() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_49()) {
			jj_scanpos = xsp;
			if (jj_3R_50()) return true;
		}
		return false;
	}

	static private boolean jj_3R_170() {
		return false;
	}

	static private boolean jj_3R_87() {
		if (jj_3R_105()) return true;
		return false;
	}

	static private boolean jj_3R_169() {
		if (jj_scan_token(PARQA)) return true;
		return false;
	}

	static private boolean jj_3R_168() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_169()) {
			jj_scanpos = xsp;
			if (jj_3R_170()) return true;
		}
		return false;
	}

	static private boolean jj_3R_96() {
		if (jj_scan_token(ID)) return true;
		return false;
	}

	static private boolean jj_3R_158() {
		if (jj_3R_18()) return true;
		if (jj_3R_168()) return true;
		return false;
	}

	static private boolean jj_3R_52() {
		if (jj_3R_87()) return true;
		return false;
	}

	static private boolean jj_3R_157() {
		if (jj_3R_16()) return true;
		return false;
	}

	static private boolean jj_3R_152() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_157()) {
			jj_scanpos = xsp;
			if (jj_3R_158()) return true;
		}
		return false;
	}

	static private boolean jj_3R_142() {
		if (jj_3R_149()) return true;
		return false;
	}

	static private boolean jj_3R_19() {
		if (jj_3R_52()) return true;
		return false;
	}

	static private boolean jj_3R_149() {
		if (jj_3R_152()) return true;
		if (jj_3R_17()) return true;
		return false;
	}

	static private boolean jj_3R_130() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_8()) {
			jj_scanpos = xsp;
			if (jj_3R_142()) return true;
		}
		return false;
	}

	static private boolean jj_3_8() {
		if (jj_3R_12()) return true;
		return false;
	}

	static private boolean jj_initialized_once = false;
	/** Generated Token Manager. */
	static public JavaCodeSmellsDetectorTokenManager token_source;
	static SimpleCharStream jj_input_stream;
	/** Current token. */
	static public Token token;
	/** Next token. */
	static public Token jj_nt;
	static private int jj_ntk;
	static private Token jj_scanpos, jj_lastpos;
	static private int jj_la;
	/** Whether we are looking ahead. */
	static private boolean jj_lookingAhead = false;
	static private boolean jj_semLA;
	static private int jj_gen;
	static final private int[] jj_la1 = new int[118];
	static private int[] jj_la1_0;
	static private int[] jj_la1_1;
	static private int[] jj_la1_2;
	static private int[] jj_la1_3;
	/*static {
		jj_la1_init_0();
		jj_la1_init_1();
		jj_la1_init_2();
		jj_la1_init_3();
	}*/
	/*
	private static void jj_la1_init_0() {
		jj_la1_0 = new int[] {0x0,0x0,0x404000,0x0,0x0,0x0,0x404000,0x4000,0x4000,0x40000000,0x0,0x4000,0x4000,0x4000,0x40000000,0x4000,0x4000,0x0,0x0,0x4000,0x4000,0x0,0x0,0x0,0x0,0x8250000,0x8250000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x8250000,0x0,0x0,0x0,0x0,0x8250000,0x0,0x8250000,0x0,0xd270000,0x80000000,0x80000000,0x0,0xd270000,0x5020000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x80000000,0x0,0x0,0x0,0x80000000,0x400000,0x0,0x8250000,0x0,0x8250000,0x80000000,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0xd270000,0x5020000,0x80000000,0x0,0x80000000,0x80000000,0x0,0x0,0x80000000,0x80000000,0x80000000,0x0,0x0,0x10000000,0x2080000,0x2080000,0x2080000,0x2080000,0x2080000,0x8250000,0x8250000,0x0,0x0,0x0,0x80000000,0x100000,0x0,0x100000,};
	}
	private static void jj_la1_init_1() {
		jj_la1_1 = new int[] {0x8000,0x80,0x40401,0x0,0x0,0x80,0x40401,0x40401,0x40001,0x0,0x40,0x40001,0x40001,0x40001,0x0,0x240001,0x240001,0x10000000,0x0,0x240001,0x240001,0x0,0x0,0x0,0x0,0x20370a05,0x20370a05,0x20270001,0x0,0x10000000,0x0,0x20270001,0x20270001,0x0,0x0,0x44806000,0x0,0x0,0x10000000,0x70000,0x100a04,0x0,0x0,0x0,0x0,0x100a04,0x0,0x100a04,0x0,0x8f982a2c,0x44806000,0x44806000,0x800000,0x8f982a2c,0x8f882028,0x0,0x4800000,0x4800000,0x0,0x4800000,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x40006000,0x4000000,0x44806000,0x0,0x0,0x0,0x44806000,0x0,0x0,0x100a04,0x0,0x100a04,0x44806000,0x44806000,0x44806000,0x0,0x0,0x0,0x0,0x40000000,0x40004000,0x28,0x28,0x8f982a2c,0x8f882000,0x44806000,0x0,0x44806000,0x44806000,0x0,0x802000,0x44806000,0x44806000,0x44806000,0x4800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100a04,0x100a04,0x0,0x0,0x0,0x44806000,0x0,0x2,0x0,};
	}
	private static void jj_la1_init_2() {
		jj_la1_2 = new int[] {0x0,0x0,0x10000000,0x140000,0x8000000,0x0,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x12000000,0x20000000,0x0,0x20000000,0x40003,0x40003,0x2,0x40000,0x0,0x40000,0x2,0x2,0x20000000,0x0,0x22e0000,0x20000000,0x20000000,0x0,0x0,0x40001,0x20000000,0x40000,0x20000000,0x800000,0x40001,0x800000,0x0,0x20000000,0x120c0005,0x2e0000,0x2e0000,0x0,0x120c0005,0x120c0004,0x20000000,0x40000,0x40000,0x800000,0x0,0x0,0x800000,0x0,0x0,0x0,0x80000,0x100000,0xe0000,0x200000,0x2e0000,0x8000000,0x200000,0x800000,0x2e0000,0x40000,0x8000000,0x40000,0x800000,0xa00000,0x2e0000,0x2e0000,0x2e0000,0x800000,0xa00000,0x800000,0x800000,0x0,0x20000,0x40004,0x40004,0x120c0005,0x120c0000,0x2e0000,0xa80000,0x2e0000,0x2e0000,0x40000,0x80000,0x2e0000,0x2e0000,0x2e0000,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x40001,0x40001,0x20000000,0x40000,0x40000,0x2e0000,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_3() {
		jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3040,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x3040,0x3040,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3e,0x0,0x80,0x100,0xe00,0x0,0x0,0x3040,0x0,0x3040,0x0,0x0,0x0,0x3040,0x0,0x0,0x0,0x0,0x400,0x3040,0x3040,0x3040,0x0,0x400,0x0,0x0,0x0,0x3000,0x0,0x0,0x0,0x0,0x3040,0x3e,0x3040,0x3040,0x0,0x0,0x3040,0x3040,0x3040,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3040,0x0,0x0,0x0,};
	}
	 */
	static final private JJCalls[] jj_2_rtns = new JJCalls[20];
	static private boolean jj_rescan = false;
	static private int jj_gc = 0;

	/** Constructor with InputStream. */
	public JavaCodeSmellsDetector(/*java.io.*/InputStream stream) {
		this(stream, null);
	}
	/** Constructor with InputStream and supplied encoding */
	public JavaCodeSmellsDetector(/*java.io.*/InputStream stream, String encoding) {
		if (jj_initialized_once) {
			System.out.println("ERROR: Second call to constructor of static parser.  ");
			System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		try {
			jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
		} catch(/*java.io.*/UnsupportedEncodingException e)
		{ throw new RuntimeException(e); }
		token_source = new JavaCodeSmellsDetectorTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 118; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	static public void ReInit(/*/*java.io.*/InputStream stream) {
		ReInit(stream, null);
	}
	/** Reinitialise. */
	static public void ReInit(/*/*java.io.*/InputStream stream, String encoding) {
		try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(/*java.io.*/UnsupportedEncodingException e) { throw new RuntimeException(e); }
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 118; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	/** Constructor. */
	public JavaCodeSmellsDetector(/*java.io.*/Reader stream) {
		if (jj_initialized_once) {
			System.out.println("ERROR: Second call to constructor of static parser. ");
			System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new JavaCodeSmellsDetectorTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 118; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	static public void ReInit(/*java.io.*/Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 118; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	/** Constructor with generated Token Manager. */
	public JavaCodeSmellsDetector(JavaCodeSmellsDetectorTokenManager tm) {
		if (jj_initialized_once) {
			System.out.println("ERROR: Second call to constructor of static parser. ");
			System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 118; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(JavaCodeSmellsDetectorTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 118; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	static private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if (/*(oldToken = token).*/next != null)
			token = token.next;
		else /*token = */token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			if (++jj_gc > 100) {
				jj_gc = 0;
				for (int i = 0; i < jj_2_rtns.length; i++) {
					JJCalls c = jj_2_rtns[i];
					while (c != null) {
						if (c.gen < jj_gen) c.first = null;
						c = c.next;
					}
				}
			}
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	//static private final class LookaheadSuccess extends /*java.lang.*/Error { }
	static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
	static private boolean jj_scan_token(int kind) {
		if (jj_scanpos == jj_lastpos) {
			jj_la--;
			if (jj_scanpos.next == null) {
				/*jj_lastpos = jj_scanpos = */jj_scanpos.next = token_source.getNextToken();
			} else {
				/*jj_lastpos = */jj_scanpos = jj_scanpos.next;
			}
		} else {
			jj_scanpos = jj_scanpos.next;
		}
		if (jj_rescan) {
			int i = 0; Token tok = token;
			while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
			if (tok != null) jj_add_error_token(kind, i);
		}
		if (jj_scanpos.kind != kind) return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
		return false;
	}


	/** Get the next Token. */
	static final public Token getNextToken() {
		if (token.next != null) token = token.next;
		else /*token = token.next = */token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	/** Get the specific Token. */
	static final public Token getToken(int index) {
		//Token t = jj_lookingAhead ? jj_scanpos : token;
		for (int i = 0; i < index; i++) {
			if (t.next != null) t = t.next;
			else /*t = t.next = */token_source.getNextToken();
		}
		return t;
	}

	static private int jj_ntk() {
		if (/*(jj_nt=token.next) == null*/true)
			return;// (jj_ntk = (token.next=token_source.getNextToken()).kind);
		else
			;
			//return (jj_ntk == jj_nt/*.kind*/);
	}

	static private /*java.util.*/List jj_expentries = new /*java.util.*/ArrayList();
	static private int[] jj_expentry;
	static private int jj_kind = -1;
	static private int[] jj_lasttokens = new int[100];
	static private int jj_endpos;

	static private void jj_add_error_token(int kind, int pos) {
		if (pos >= 100) return;
		if (pos == jj_endpos + 1) {
			jj_lasttokens[jj_endpos++] = kind;
		} else if (jj_endpos != 0) {
			jj_expentry = new int[jj_endpos];
			for (int i = 0; i < jj_endpos; i++) {
				jj_expentry[i] = jj_lasttokens[i];
			}
			boolean exists = false;
			//for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
				int[] oldentry = (int[])(it.next());
				if (oldentry.length == jj_expentry.length) {
					exists = true;
					for (int i = 0; i < jj_expentry.length; i++) {
						if (oldentry[i] != jj_expentry[i]) {
							exists = false;
							break;
						}
					}
					if (exists) break;
				}
			//}
			if (!exists) jj_expentries.add(jj_expentry);
			if (pos != 0) ;//jj_lasttokens[(jj_endpos = pos) - 1] = kind;
		}
	}

	/** Generate ParseException. */
	static public ParseException generateParseException() {
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[110];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 118; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if (/*(jj_la1_0[i] & (1<<j)) != 0*/true) {
						la1tokens[j] = true;
					}
					if (/*(jj_la1_1[i]/* & (1<<j)) != 0*/true) {
						la1tokens[32+j] = true;
					}
					if (/*(jj_la1_2[i] /*& (1<<j)) != 0*/true) {
						la1tokens[64+j] = true;
					}
					if (/*(jj_la1_3[i]/* & (1<<j)) != 0*/true) {
						la1tokens[96+j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 110; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}
		}
		jj_endpos = 0;
		jj_rescan_token();
		jj_add_error_token(0, 0);
		int[][] exptokseq;//= new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = (int[])jj_expentries.get(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	/** Enable tracing. */
	static final public void enable_tracing() {
	}

	/** Disable tracing. */
	static final public void disable_tracing() {
	}

	static private void jj_rescan_token() {
		jj_rescan = true;
		for (int i = 0; i < 20; i++) {
			try {
				JJCalls p = jj_2_rtns[i];
				do {
					if (p.gen > jj_gen) {
						jj_la = p.arg; //jj_lastpos = jj_scanpos = p.first;
						switch (i) {
							case 0: jj_3_1(); break;
							case 1: jj_3_2(); break;
							case 2: jj_3_3(); break;
							case 3: jj_3_4(); break;
							case 4: jj_3_5(); break;
							case 5: jj_3_6(); break;
							case 6: jj_3_7(); break;
							case 7: jj_3_8(); break;
							case 8: jj_3_9(); break;
							case 9: jj_3_10(); break;
							case 10: jj_3_11(); break;
							case 11: jj_3_12(); break;
							case 12: jj_3_13(); break;
							case 13: jj_3_14(); break;
							case 14: jj_3_15(); break;
							case 15: jj_3_16(); break;
							case 16: jj_3_17(); break;
							case 17: jj_3_18(); break;
							case 18: jj_3_19(); break;
							case 19: jj_3_20(); break;
						}
					}
					p = p.next;
				} while (p != null);
			} catch(LookaheadSuccess ls) { }
		}
		jj_rescan = false;
	}

	static private void jj_save(int index, int xla) {
		JJCalls p = jj_2_rtns[index];
		while (p.gen > jj_gen) {
			if (p.next == null) { /*p = p.*/next = new JJCalls(); break; }
			p = p.next;
		}
		p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
	}

	/*static final class JJCalls {
		int gen;
		Token first;
		int arg;
		JJCalls next;
	}*/

}
